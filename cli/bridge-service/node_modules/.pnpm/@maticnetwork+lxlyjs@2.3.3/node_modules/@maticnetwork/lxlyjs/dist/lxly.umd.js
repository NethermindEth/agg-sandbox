/*!
 * @license :@maticnetwork/lxlyjs - V2.3.3 - 01/07/2025
 * https://github.com/0xpolygon/lxly.js
 * Copyright (c) 2025 @Polygon Labs; Licensed MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@ethereumjs/util"), require("node-fetch"));
	else if(typeof define === 'function' && define.amd)
		define("lxly", ["@ethereumjs/util", "node-fetch"], factory);
	else if(typeof exports === 'object')
		exports["lxly"] = factory(require("@ethereumjs/util"), require("node-fetch"));
	else
		root["lxly"] = factory(root["@ethereumjs/util"], root["node-fetch"]);
})(self, (__WEBPACK_EXTERNAL_MODULE__ethereumjs_util__, __WEBPACK_EXTERNAL_MODULE_node_fetch__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/abis/index.ts":
/*!***************************!*\
  !*** ./src/abis/index.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./testnet */ "./src/abis/testnet/index.ts"), exports);
__exportStar(__webpack_require__(/*! ./mainnet */ "./src/abis/mainnet/index.ts"), exports);


/***/ }),

/***/ "./src/abis/mainnet/BridgeExtension.ts":
/*!*********************************************!*\
  !*** ./src/abis/mainnet/BridgeExtension.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "type": "constructor", "inputs": [{ "name": "bridge_", "type": "address", "internalType": "address" }], "stateMutability": "nonpayable" }, { "type": "function", "name": "bridge", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "contract PolygonZkEVMBridgeV2" }], "stateMutability": "view" }, { "type": "function", "name": "bridgeAndCall", "inputs": [{ "name": "token", "type": "address", "internalType": "address" }, { "name": "amount", "type": "uint256", "internalType": "uint256" }, { "name": "destinationNetwork", "type": "uint32", "internalType": "uint32" }, { "name": "callAddress", "type": "address", "internalType": "address" }, { "name": "fallbackAddress", "type": "address", "internalType": "address" }, { "name": "callData", "type": "bytes", "internalType": "bytes" }, { "name": "forceUpdateGlobalExitRoot", "type": "bool", "internalType": "bool" }], "outputs": [], "stateMutability": "payable" }, { "type": "function", "name": "onMessageReceived", "inputs": [{ "name": "originAddress", "type": "address", "internalType": "address" }, { "name": "originNetwork", "type": "uint32", "internalType": "uint32" }, { "name": "data", "type": "bytes", "internalType": "bytes" }], "outputs": [], "stateMutability": "payable" }, { "type": "error", "name": "AmountDoesNotMatchMsgValue", "inputs": [] }, { "type": "error", "name": "InvalidDepositIndex", "inputs": [] }, { "type": "error", "name": "OriginMustBeBridgeExtension", "inputs": [] }, { "type": "error", "name": "SenderMustBeBridge", "inputs": [] }, { "type": "error", "name": "UnclaimedAsset", "inputs": [] }];


/***/ }),

/***/ "./src/abis/mainnet/ERC20.ts":
/*!***********************************!*\
  !*** ./src/abis/mainnet/ERC20.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "string", "name": "name", "type": "string" }, { "internalType": "string", "name": "symbol", "type": "string" }, { "internalType": "address", "name": "initialAccount", "type": "address" }, { "internalType": "uint256", "name": "initialBalance", "type": "uint256" }], "stateMutability": "payable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" }, { "inputs": [], "name": "EIP712DOMAIN_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "DOMAIN_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "NAME_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "PERMIT_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "VERSION_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "approveInternal", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burn", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "getChainId", "outputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "nonces", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transferInternal", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/mainnet/GasPorter.ts":
/*!***************************************!*\
  !*** ./src/abis/mainnet/GasPorter.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [
    {
        "type": "constructor",
        "inputs": [
            {
                "name": "lxlyBridge_",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "dex_",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "settlementToken_",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "nonpayable"
    },
    {
        "type": "receive",
        "stateMutability": "payable"
    },
    {
        "type": "function",
        "name": "WETHToken",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "bridgeAssetAndGas",
        "inputs": [
            {
                "name": "requestConversion",
                "type": "bool",
                "internalType": "bool"
            },
            {
                "name": "forceUpdateGlobalExitRoot",
                "type": "bool",
                "internalType": "bool"
            },
            {
                "name": "destinationNetwork",
                "type": "uint32",
                "internalType": "uint32"
            },
            {
                "name": "destinationAddress",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "trackingNumber",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "gasset",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "gassetSource",
                "type": "uint8",
                "internalType": "enum GasPorter.GassetSource"
            },
            {
                "name": "gassetPermitData",
                "type": "bytes",
                "internalType": "bytes"
            },
            {
                "name": "gassetAmount",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "swapCalldata",
                "type": "bytes",
                "internalType": "bytes"
            },
            {
                "name": "token",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "tokenAmount",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "tokenPermitData",
                "type": "bytes",
                "internalType": "bytes"
            }
        ],
        "outputs": [],
        "stateMutability": "payable"
    },
    {
        "type": "function",
        "name": "conversionNonce",
        "inputs": [
            {
                "name": "user",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "originNetworkID",
                "type": "uint32",
                "internalType": "uint32"
            }
        ],
        "outputs": [
            {
                "name": "",
                "type": "uint256",
                "internalType": "uint256"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "convertGasset",
        "inputs": [
            {
                "name": "authorization",
                "type": "tuple",
                "internalType": "struct GasPorter.ConversionAuthorization",
                "components": [
                    {
                        "name": "data",
                        "type": "tuple",
                        "internalType": "struct GasPorter.ConversionAuthorizationData",
                        "components": [
                            {
                                "name": "originNetworkID",
                                "type": "uint32",
                                "internalType": "uint32"
                            },
                            {
                                "name": "trackingNumber",
                                "type": "uint256",
                                "internalType": "uint256"
                            },
                            {
                                "name": "signer",
                                "type": "address",
                                "internalType": "address"
                            },
                            {
                                "name": "conversionNonce",
                                "type": "uint256",
                                "internalType": "uint256"
                            },
                            {
                                "name": "gassetDestinationAddress",
                                "type": "address",
                                "internalType": "address"
                            },
                            {
                                "name": "gassetDestinationPermitData",
                                "type": "bytes",
                                "internalType": "bytes"
                            },
                            {
                                "name": "gassetDestinationAmount",
                                "type": "uint256",
                                "internalType": "uint256"
                            },
                            {
                                "name": "destinationSwapCalldata",
                                "type": "bytes",
                                "internalType": "bytes"
                            },
                            {
                                "name": "destinationNativeTokenMinimumAmount",
                                "type": "uint256",
                                "internalType": "uint256"
                            },
                            {
                                "name": "deadline",
                                "type": "uint256",
                                "internalType": "uint256"
                            }
                        ]
                    },
                    {
                        "name": "signature",
                        "type": "bytes",
                        "internalType": "bytes"
                    }
                ]
            }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
    },
    {
        "type": "function",
        "name": "convertGasset_",
        "inputs": [
            {
                "name": "authorizationData",
                "type": "tuple",
                "internalType": "struct GasPorter.ConversionAuthorizationData",
                "components": [
                    {
                        "name": "originNetworkID",
                        "type": "uint32",
                        "internalType": "uint32"
                    },
                    {
                        "name": "trackingNumber",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "signer",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "conversionNonce",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "gassetDestinationAddress",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "gassetDestinationPermitData",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "gassetDestinationAmount",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "destinationSwapCalldata",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "destinationNativeTokenMinimumAmount",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "deadline",
                        "type": "uint256",
                        "internalType": "uint256"
                    }
                ]
            },
            {
                "name": "signer",
                "type": "address",
                "internalType": "address"
            }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
    },
    {
        "type": "function",
        "name": "determineConversion",
        "inputs": [
            {
                "name": "destinationNetworkGasTokenNetwork",
                "type": "uint32",
                "internalType": "uint32"
            },
            {
                "name": "destinationNetworkGasTokenAddress",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "gasset",
                "type": "address",
                "internalType": "address"
            }
        ],
        "outputs": [
            {
                "name": "conversionRequired",
                "type": "bool",
                "internalType": "bool"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "determineGasset",
        "inputs": [
            {
                "name": "destinationNetworkGasTokenNetwork",
                "type": "uint32",
                "internalType": "uint32"
            },
            {
                "name": "destinationNetworkGasTokenAddress",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "gassetType",
                "type": "uint8",
                "internalType": "enum GasPorter.GassetType"
            }
        ],
        "outputs": [
            {
                "name": "gasset",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "dex",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "eip712Domain",
        "inputs": [],
        "outputs": [
            {
                "name": "fields",
                "type": "bytes1",
                "internalType": "bytes1"
            },
            {
                "name": "name",
                "type": "string",
                "internalType": "string"
            },
            {
                "name": "version",
                "type": "string",
                "internalType": "string"
            },
            {
                "name": "chainId",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "verifyingContract",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "salt",
                "type": "bytes32",
                "internalType": "bytes32"
            },
            {
                "name": "extensions",
                "type": "uint256[]",
                "internalType": "uint256[]"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "gasTokenAddress",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "gasTokenNetwork",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "uint32",
                "internalType": "uint32"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "initialize",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
    },
    {
        "type": "function",
        "name": "invalidateConversionNonce",
        "inputs": [
            {
                "name": "originNetworkID",
                "type": "uint32",
                "internalType": "uint32"
            }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
    },
    {
        "type": "function",
        "name": "lxlyBridge",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "contract ILxlyBridge"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "networkID",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "uint32",
                "internalType": "uint32"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "plotRoute",
        "inputs": [
            {
                "name": "cargo",
                "type": "tuple",
                "internalType": "struct GasPorter.Cargo",
                "components": [
                    {
                        "name": "msgValue",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "destinationNetwork",
                        "type": "uint32",
                        "internalType": "uint32"
                    },
                    {
                        "name": "destinationNetworkGasTokenNetwork",
                        "type": "uint32",
                        "internalType": "uint32"
                    },
                    {
                        "name": "destinationNetworkGasTokenAddress",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "destinationAddress",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "destinationGasPorterDex",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "gassetType",
                        "type": "uint8",
                        "internalType": "enum GasPorter.GassetType"
                    },
                    {
                        "name": "gassetSource",
                        "type": "uint8",
                        "internalType": "enum GasPorter.GassetSource"
                    },
                    {
                        "name": "gassetAmount",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "token",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "tokenAmount",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "gassetPermitData",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "swapCalldata",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "tokenPermitData",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "forceUpdateGlobalExitRoot",
                        "type": "bool",
                        "internalType": "bool"
                    },
                    {
                        "name": "trackingNumber",
                        "type": "uint256",
                        "internalType": "uint256"
                    }
                ]
            }
        ],
        "outputs": [
            {
                "name": "msgValue",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "callData",
                "type": "bytes",
                "internalType": "bytes"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "settlementToken",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "settlementTokenIsNativeToken",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "bool",
                "internalType": "bool"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "version",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "string",
                "internalType": "string"
            }
        ],
        "stateMutability": "pure"
    },
    {
        "type": "event",
        "name": "ConversionFailed",
        "inputs": [
            {
                "name": "originNetworkID",
                "type": "uint32",
                "indexed": true,
                "internalType": "uint32"
            },
            {
                "name": "trackingNumber",
                "type": "uint256",
                "indexed": true,
                "internalType": "uint256"
            },
            {
                "name": "signer",
                "type": "address",
                "indexed": true,
                "internalType": "address"
            },
            {
                "name": "msgSender",
                "type": "address",
                "indexed": false,
                "internalType": "address"
            },
            {
                "name": "reason",
                "type": "bytes",
                "indexed": false,
                "internalType": "bytes"
            }
        ],
        "anonymous": false
    },
    {
        "type": "event",
        "name": "ConversionRequested",
        "inputs": [
            {
                "name": "trackingNumber",
                "type": "uint256",
                "indexed": true,
                "internalType": "uint256"
            },
            {
                "name": "destinationNetwork",
                "type": "uint32",
                "indexed": false,
                "internalType": "uint32"
            },
            {
                "name": "destinationAddress",
                "type": "address",
                "indexed": false,
                "internalType": "address"
            },
            {
                "name": "gasset",
                "type": "address",
                "indexed": false,
                "internalType": "address"
            },
            {
                "name": "bridgedGassetAmount",
                "type": "uint256",
                "indexed": false,
                "internalType": "uint256"
            }
        ],
        "anonymous": false
    },
    {
        "type": "event",
        "name": "EIP712DomainChanged",
        "inputs": [],
        "anonymous": false
    },
    {
        "type": "event",
        "name": "GassetConverted",
        "inputs": [
            {
                "name": "originNetworkID",
                "type": "uint32",
                "indexed": true,
                "internalType": "uint32"
            },
            {
                "name": "trackingNumber",
                "type": "uint256",
                "indexed": true,
                "internalType": "uint256"
            },
            {
                "name": "signer",
                "type": "address",
                "indexed": true,
                "internalType": "address"
            }
        ],
        "anonymous": false
    },
    {
        "type": "event",
        "name": "Initialized",
        "inputs": [
            {
                "name": "version",
                "type": "uint64",
                "indexed": false,
                "internalType": "uint64"
            }
        ],
        "anonymous": false
    },
    {
        "type": "error",
        "name": "AddressEmptyCode",
        "inputs": [
            {
                "name": "target",
                "type": "address",
                "internalType": "address"
            }
        ]
    },
    {
        "type": "error",
        "name": "AddressInsufficientBalance",
        "inputs": [
            {
                "name": "account",
                "type": "address",
                "internalType": "address"
            }
        ]
    },
    {
        "type": "error",
        "name": "AuthorizationExpired",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDeliverNativeTokenToRecipient",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineConversionBecauseRepresentativeTokenDoesNotExist",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineConversionForThisGasset",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineConversionMakeSureDestinationNetworkParametersAreCorrect",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineGassetBecauseRepresentativeTokenDoesNotExist",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineGassetMakeSureDestinationNetworkParametersAreCorrect",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotReturnExcessiveMessageValueToYou",
        "inputs": []
    },
    {
        "type": "error",
        "name": "DestinationAddressCannotBeAddressZero",
        "inputs": []
    },
    {
        "type": "error",
        "name": "DestinationNetworkCannotBeCurrentNetwork",
        "inputs": []
    },
    {
        "type": "error",
        "name": "ECDSAInvalidSignature",
        "inputs": []
    },
    {
        "type": "error",
        "name": "ECDSAInvalidSignatureLength",
        "inputs": [
            {
                "name": "length",
                "type": "uint256",
                "internalType": "uint256"
            }
        ]
    },
    {
        "type": "error",
        "name": "ECDSAInvalidSignatureS",
        "inputs": [
            {
                "name": "s",
                "type": "bytes32",
                "internalType": "bytes32"
            }
        ]
    },
    {
        "type": "error",
        "name": "FailedInnerCall",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GasPorterOnCurrentNetworkDoesNotSupportDexSwapAsGassetSourceYet",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GasPorterOnCurrentNetworkDoesNotSupportGassetConversionYet",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GasPorterOnDestinationNetworkDoesNotSupportGassetConversionYet",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetAmountCannotBeZero",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetCannotBeDolphinAddressDidYouMeanAddressZero",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetPermitDataMustBeEmptyWhenGassetIsNativeToken",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetTypeCannotBeERC20TokenWhenNativeTokensAreTheSame",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetTypeCannotBeNativeTokenWhenNativeTokensAreDifferent",
        "inputs": []
    },
    {
        "type": "error",
        "name": "InsufficientAmountInERC20Permit",
        "inputs": [
            {
                "name": "amount",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "minimumAmount",
                "type": "uint256",
                "internalType": "uint256"
            }
        ]
    },
    {
        "type": "error",
        "name": "InsufficientMessageValue",
        "inputs": [
            {
                "name": "amount",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "minimumAmount",
                "type": "uint256",
                "internalType": "uint256"
            }
        ]
    },
    {
        "type": "error",
        "name": "InvalidConversionNonce",
        "inputs": []
    },
    {
        "type": "error",
        "name": "InvalidGassetTypeAndGassetSourceCombination",
        "inputs": []
    },
    {
        "type": "error",
        "name": "InvalidInitialization",
        "inputs": []
    },
    {
        "type": "error",
        "name": "InvalidToken",
        "inputs": []
    },
    {
        "type": "error",
        "name": "NotInitializing",
        "inputs": []
    },
    {
        "type": "error",
        "name": "OriginNetworkCannotBeCurrentNetwork",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SafeERC20FailedOperation",
        "inputs": [
            {
                "name": "token",
                "type": "address",
                "internalType": "address"
            }
        ]
    },
    {
        "type": "error",
        "name": "SignerInAuthorizationDataAndActualSignerDoNotMatch",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SwapCalldataCannotBeEmptyWhenGassetSourceIsDexSwap",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SwapCalldataCannotBeProvidedWhenMessageValueIsProvided",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SwapCalldataMustBeEmptyWhenGassetSourceIsNotDexSwap",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SwapFailedBecauseDexGaveInsufficientAmount",
        "inputs": [
            {
                "name": "amount",
                "type": "uint256",
                "internalType": "uint256"
            }
        ]
    },
    {
        "type": "error",
        "name": "SwapFailedBecauseDexRevertedWithoutExplanation",
        "inputs": []
    },
    {
        "type": "error",
        "name": "ThisFunctionCanOnlyBeCalledByGasPorter",
        "inputs": []
    },
    {
        "type": "error",
        "name": "TokenAmountCannotBeZero",
        "inputs": []
    },
    {
        "type": "error",
        "name": "TokenPermitDataMustBeEmptyWhenAssetAndGassetAreTheSameAndGassetPermitDataIsProvided",
        "inputs": []
    },
    {
        "type": "error",
        "name": "TokenPermitDataMustBeEmptyWhenAssetIsNativeToken",
        "inputs": []
    },
    {
        "type": "error",
        "name": "UnknownFunctionSelectorInERC20Permit",
        "inputs": []
    }
];


/***/ }),

/***/ "./src/abis/mainnet/GenericVaultBridgeToken.ts":
/*!*****************************************************!*\
  !*** ./src/abis/mainnet/GenericVaultBridgeToken.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [
    {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessControlBadConfirmation",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "neededRole",
                type: "bytes32"
            }
        ],
        name: "AccessControlUnauthorizedAccount",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "availableAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requestedAssets",
                type: "uint256"
            }
        ],
        name: "AssetsTooLarge",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "requiredAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "receivedAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "assetsInMigrationFund",
                type: "uint256"
            }
        ],
        name: "CannotCompleteMigration",
        type: "error"
    },
    {
        inputs: [],
        name: "CannotRebalanceReserve",
        type: "error"
    },
    {
        inputs: [],
        name: "ContractNotSupportedOnThisNetwork",
        type: "error"
    },
    {
        inputs: [],
        name: "ECDSAInvalidSignature",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "length",
                type: "uint256"
            }
        ],
        name: "ECDSAInvalidSignatureLength",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }
        ],
        name: "ECDSAInvalidSignatureS",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "allowance",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "needed",
                type: "uint256"
            }
        ],
        name: "ERC20InsufficientAllowance",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "sender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "balance",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "needed",
                type: "uint256"
            }
        ],
        name: "ERC20InsufficientBalance",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "approver",
                type: "address"
            }
        ],
        name: "ERC20InvalidApprover",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "ERC20InvalidReceiver",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "sender",
                type: "address"
            }
        ],
        name: "ERC20InvalidSender",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            }
        ],
        name: "ERC20InvalidSpender",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }
        ],
        name: "ERC2612ExpiredSignature",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signer",
                type: "address"
            },
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "ERC2612InvalidSigner",
        type: "error"
    },
    {
        inputs: [],
        name: "EnforcedPause",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "burnedShares",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "withdrawnAssets",
                type: "uint256"
            }
        ],
        name: "ExcessiveYieldVaultSharesBurned",
        type: "error"
    },
    {
        inputs: [],
        name: "ExpectedPause",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "mintedShares",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requiredShares",
                type: "uint256"
            }
        ],
        name: "IncorrectAmountOfSharesMinted",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "redeemedShares",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requiredShares",
                type: "uint256"
            }
        ],
        name: "IncorrectAmountOfSharesRedeemed",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "msgValue",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requestedAssets",
                type: "uint256"
            }
        ],
        name: "IncorrectMsgValue",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requestedAssets",
                type: "uint256"
            }
        ],
        name: "InsufficientUnderlyingTokenReceived",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "depositedAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "mintedShares",
                type: "uint256"
            }
        ],
        name: "InsufficientYieldVaultSharesMinted",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "currentNonce",
                type: "uint256"
            }
        ],
        name: "InvalidAccountNonce",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "minimumAmount",
                type: "uint256"
            }
        ],
        name: "InvalidAmountInERC20Permit",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidAssets",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidDestinationNetworkId",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidInitialization",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidInitializer",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLxLyBridge",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidMigrationManager",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidMinimumReservePercentage",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidName",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidOriginNetwork",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidOwner",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "expectedOwner",
                type: "address"
            }
        ],
        name: "InvalidOwnerInERC20Permit",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidPermitData",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidReceiver",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "selector",
                type: "bytes4"
            }
        ],
        name: "InvalidSelectorInERC20Permit",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidShares",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "address",
                name: "expectedSpender",
                type: "address"
            }
        ],
        name: "InvalidSpenderInERC20Permit",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidSymbol",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidUnderlyingToken",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidVaultBridgeTokenPart2",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidYieldRecipient",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidYieldVault",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidYieldVaultMaximumSlippagePercentage",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assetsToDeposit",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "minimumYieldVaultDeposit",
                type: "uint256"
            }
        ],
        name: "MinimumYieldVaultDepositNotMet",
        type: "error"
    },
    {
        inputs: [],
        name: "NoNeedToRebalanceReserve",
        type: "error"
    },
    {
        inputs: [],
        name: "NoYield",
        type: "error"
    },
    {
        inputs: [],
        name: "NotInitializing",
        type: "error"
    },
    {
        inputs: [],
        name: "ReentrancyGuardReentrantCall",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "token",
                type: "address"
            }
        ],
        name: "SafeERC20FailedOperation",
        type: "error"
    },
    {
        inputs: [],
        name: "Unauthorized",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes"
            }
        ],
        name: "UnknownError",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "functionSelector",
                type: "bytes4"
            }
        ],
        name: "UnknownFunction",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assetsToDeposit",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "depositLimit",
                type: "uint256"
            }
        ],
        name: "YieldVaultDepositFailed",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "sharesToRedeem",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "redemptionLimit",
                type: "uint256"
            }
        ],
        name: "YieldVaultRedemptionFailed",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assetsToWithdraw",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "withdrawalLimit",
                type: "uint256"
            }
        ],
        name: "YieldVaultWithdrawalFailed",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Approval",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "vbTokenAmount",
                type: "uint256"
            }
        ],
        name: "Burned",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "sender",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "Deposit",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "who",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "DonatedAsYield",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "who",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "DonatedForCompletingMigration",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint64",
                name: "version",
                type: "uint64"
            }
        ],
        name: "Initialized",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint32",
                name: "originNetwork",
                type: "uint32"
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "migrationFeesFundUtilization",
                type: "uint256"
            }
        ],
        name: "MigrationCompleted",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "minimumReservePercentage",
                type: "uint256"
            }
        ],
        name: "MinimumReservePercentageSet",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "Paused",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "oldReservedAssets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "newReservedAssets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "reservePercentage",
                type: "uint256"
            }
        ],
        name: "ReserveRebalanced",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "previousAdminRole",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "newAdminRole",
                type: "bytes32"
            }
        ],
        name: "RoleAdminChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "address",
                name: "account",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "sender",
                type: "address"
            }
        ],
        name: "RoleGranted",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "address",
                name: "account",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "sender",
                type: "address"
            }
        ],
        name: "RoleRevoked",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Transfer",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "transferFeeCalculator",
                type: "address"
            }
        ],
        name: "TransferFeeCalculatorSet",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "Unpaused",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "sender",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "Withdraw",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "yieldRecipient",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "vbTokenAmount",
                type: "uint256"
            }
        ],
        name: "YieldCollected",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "yieldRecipient",
                type: "address"
            }
        ],
        name: "YieldRecipientSet",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "redeemedShares",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "receivedAssets",
                type: "uint256"
            }
        ],
        name: "YieldVaultDrained",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "slippagePercentage",
                type: "uint256"
            }
        ],
        name: "YieldVaultMaximumSlippagePercentageSet",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "yieldVault",
                type: "address"
            }
        ],
        name: "YieldVaultSet",
        type: "event"
    },
    {
        stateMutability: "payable",
        type: "fallback"
    },
    {
        inputs: [],
        name: "DEFAULT_ADMIN_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "DOMAIN_SEPARATOR",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "PAUSER_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "REBALANCER_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "YIELD_COLLECTOR_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "spender",
                type: "address"
            }
        ],
        name: "allowance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "asset",
        outputs: [
            {
                internalType: "address",
                name: "assetTokenAddress",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "backingDifference",
        outputs: [
            {
                internalType: "bool",
                name: "positive",
                type: "bool"
            },
            {
                internalType: "uint256",
                name: "difference",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32[32]",
                name: "smtProofLocalExitRoot",
                type: "bytes32[32]"
            },
            {
                internalType: "bytes32[32]",
                name: "smtProofRollupExitRoot",
                type: "bytes32[32]"
            },
            {
                internalType: "uint256",
                name: "globalIndex",
                type: "uint256"
            },
            {
                internalType: "bytes32",
                name: "mainnetExitRoot",
                type: "bytes32"
            },
            {
                internalType: "bytes32",
                name: "rollupExitRoot",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "destinationAddress",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "bytes",
                name: "metadata",
                type: "bytes"
            }
        ],
        name: "claimAndRedeem",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "convertToAssets",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "convertToShares",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "deposit",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "uint32",
                name: "destinationNetworkId",
                type: "uint32"
            },
            {
                internalType: "bool",
                name: "forceUpdateGlobalExitRoot",
                type: "bool"
            }
        ],
        name: "depositAndBridge",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "depositGasToken",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "destinationAddress",
                type: "address"
            },
            {
                internalType: "uint32",
                name: "destinationNetworkId",
                type: "uint32"
            },
            {
                internalType: "bool",
                name: "forceUpdateGlobalExitRoot",
                type: "bool"
            }
        ],
        name: "depositGasTokenAndBridge",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "bytes",
                name: "permitData",
                type: "bytes"
            }
        ],
        name: "depositWithPermit",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "uint32",
                name: "destinationNetworkId",
                type: "uint32"
            },
            {
                internalType: "bool",
                name: "forceUpdateGlobalExitRoot",
                type: "bool"
            },
            {
                internalType: "bytes",
                name: "permitData",
                type: "bytes"
            }
        ],
        name: "depositWithPermitAndBridge",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "eip712Domain",
        outputs: [
            {
                internalType: "bytes1",
                name: "fields",
                type: "bytes1"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            },
            {
                internalType: "string",
                name: "version",
                type: "string"
            },
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "verifyingContract",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32"
            },
            {
                internalType: "uint256[]",
                name: "extensions",
                type: "uint256[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            }
        ],
        name: "getRoleAdmin",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "grantRole",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "hasRole",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "initializer_",
                type: "address"
            },
            {
                components: [
                    {
                        internalType: "address",
                        name: "owner",
                        type: "address"
                    },
                    {
                        internalType: "string",
                        name: "name",
                        type: "string"
                    },
                    {
                        internalType: "string",
                        name: "symbol",
                        type: "string"
                    },
                    {
                        internalType: "address",
                        name: "underlyingToken",
                        type: "address"
                    },
                    {
                        internalType: "uint256",
                        name: "minimumReservePercentage",
                        type: "uint256"
                    },
                    {
                        internalType: "address",
                        name: "yieldVault",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "yieldRecipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "lxlyBridge",
                        type: "address"
                    },
                    {
                        internalType: "uint256",
                        name: "minimumYieldVaultDeposit",
                        type: "uint256"
                    },
                    {
                        internalType: "address",
                        name: "migrationManager",
                        type: "address"
                    },
                    {
                        internalType: "uint256",
                        name: "yieldVaultMaximumSlippagePercentage",
                        type: "uint256"
                    },
                    {
                        internalType: "address",
                        name: "vaultBridgeTokenPart2",
                        type: "address"
                    }
                ],
                internalType: "struct VaultBridgeToken.InitializationParameters",
                name: "initParams",
                type: "tuple"
            }
        ],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "lxlyBridge",
        outputs: [
            {
                internalType: "contract ILxLyBridge",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "lxlyId",
        outputs: [
            {
                internalType: "uint32",
                name: "",
                type: "uint32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        name: "maxDeposit",
        outputs: [
            {
                internalType: "uint256",
                name: "maxAssets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        name: "maxMint",
        outputs: [
            {
                internalType: "uint256",
                name: "maxShares",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "maxRedeem",
        outputs: [
            {
                internalType: "uint256",
                name: "maxShares",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "maxWithdraw",
        outputs: [
            {
                internalType: "uint256",
                name: "maxAssets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "migrationFeesFund",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "migrationManager",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "minimumReservePercentage",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "minimumYieldVaultDeposit",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "mint",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "mintWithGasToken",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "name",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "nonces",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "paused",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "performReversibleYieldVaultDeposit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            },
            {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            },
            {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            },
            {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }
        ],
        name: "permit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "previewDeposit",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "previewMint",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "previewRedeem",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "previewWithdraw",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "redeem",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "callerConfirmation",
                type: "address"
            }
        ],
        name: "renounceRole",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "reservePercentage",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "reservedAssets",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "revokeRole",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "stakedAssets",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "interfaceId",
                type: "bytes4"
            }
        ],
        name: "supportsInterface",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "symbol",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "totalAssets",
        outputs: [
            {
                internalType: "uint256",
                name: "totalManagedAssets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "underlyingToken",
        outputs: [
            {
                internalType: "contract IERC20",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "withdraw",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "yield",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "yieldRecipient",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "yieldVault",
        outputs: [
            {
                internalType: "contract IERC4626",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "yieldVaultMaximumSlippagePercentage",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];


/***/ }),

/***/ "./src/abis/mainnet/PolygonZkEVM.ts":
/*!******************************************!*\
  !*** ./src/abis/mainnet/PolygonZkEVM.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "contract IPolygonZkEVMGlobalExitRootV2", "name": "_globalExitRootManager", "type": "address" }, { "internalType": "contract IERC20Upgradeable", "name": "_pol", "type": "address" }, { "internalType": "contract IPolygonZkEVMBridge", "name": "_bridgeAddress", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [], "name": "AccessControlOnlyCanRenounceRolesForSelf", "type": "error" }, { "inputs": [], "name": "AddressDoNotHaveRequiredRole", "type": "error" }, { "inputs": [], "name": "AllzkEVMSequencedBatchesMustBeVerified", "type": "error" }, { "inputs": [], "name": "BatchFeeOutOfRange", "type": "error" }, { "inputs": [], "name": "ChainIDAlreadyExist", "type": "error" }, { "inputs": [], "name": "ExceedMaxVerifyBatches", "type": "error" }, { "inputs": [], "name": "FinalNumBatchBelowLastVerifiedBatch", "type": "error" }, { "inputs": [], "name": "FinalNumBatchDoesNotMatchPendingState", "type": "error" }, { "inputs": [], "name": "FinalPendingStateNumInvalid", "type": "error" }, { "inputs": [], "name": "HaltTimeoutNotExpired", "type": "error" }, { "inputs": [], "name": "InitBatchMustMatchCurrentForkID", "type": "error" }, { "inputs": [], "name": "InitNumBatchAboveLastVerifiedBatch", "type": "error" }, { "inputs": [], "name": "InitNumBatchDoesNotMatchPendingState", "type": "error" }, { "inputs": [], "name": "InvalidProof", "type": "error" }, { "inputs": [], "name": "InvalidRangeBatchTimeTarget", "type": "error" }, { "inputs": [], "name": "InvalidRangeMultiplierBatchFee", "type": "error" }, { "inputs": [], "name": "MustSequenceSomeBatch", "type": "error" }, { "inputs": [], "name": "NewAccInputHashDoesNotExist", "type": "error" }, { "inputs": [], "name": "NewPendingStateTimeoutMustBeLower", "type": "error" }, { "inputs": [], "name": "NewStateRootNotInsidePrime", "type": "error" }, { "inputs": [], "name": "NewTrustedAggregatorTimeoutMustBeLower", "type": "error" }, { "inputs": [], "name": "OldAccInputHashDoesNotExist", "type": "error" }, { "inputs": [], "name": "OldStateRootDoesNotExist", "type": "error" }, { "inputs": [], "name": "OnlyEmergencyState", "type": "error" }, { "inputs": [], "name": "OnlyNotEmergencyState", "type": "error" }, { "inputs": [], "name": "PendingStateDoesNotExist", "type": "error" }, { "inputs": [], "name": "PendingStateInvalid", "type": "error" }, { "inputs": [], "name": "PendingStateNotConsolidable", "type": "error" }, { "inputs": [], "name": "RollupAddressAlreadyExist", "type": "error" }, { "inputs": [], "name": "RollupMustExist", "type": "error" }, { "inputs": [], "name": "RollupTypeDoesNotExist", "type": "error" }, { "inputs": [], "name": "RollupTypeObsolete", "type": "error" }, { "inputs": [], "name": "SenderMustBeRollup", "type": "error" }, { "inputs": [], "name": "StoredRootMustBeDifferentThanNewRoot", "type": "error" }, { "inputs": [], "name": "TrustedAggregatorTimeoutNotExpired", "type": "error" }, { "inputs": [], "name": "UpdateNotCompatible", "type": "error" }, { "inputs": [], "name": "UpdateToSameRollupTypeID", "type": "error" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "indexed": false, "internalType": "address", "name": "rollupAddress", "type": "address" }, { "indexed": false, "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "indexed": false, "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }, { "indexed": false, "internalType": "uint64", "name": "lastVerifiedBatchBeforeUpgrade", "type": "uint64" }], "name": "AddExistingRollup", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "consensusImplementation", "type": "address" }, { "indexed": false, "internalType": "address", "name": "verifier", "type": "address" }, { "indexed": false, "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "indexed": false, "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }, { "indexed": false, "internalType": "bytes32", "name": "genesis", "type": "bytes32" }, { "indexed": false, "internalType": "string", "name": "description", "type": "string" }], "name": "AddNewRollupType", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "numBatch", "type": "uint64" }, { "indexed": false, "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "indexed": false, "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }], "name": "ConsolidatePendingState", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "rollupAddress", "type": "address" }, { "indexed": false, "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "indexed": false, "internalType": "address", "name": "gasTokenAddress", "type": "address" }], "name": "CreateNewRollup", "type": "event" }, { "anonymous": false, "inputs": [], "name": "EmergencyStateActivated", "type": "event" }, { "anonymous": false, "inputs": [], "name": "EmergencyStateDeactivated", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint8", "name": "version", "type": "uint8" }], "name": "Initialized", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }], "name": "ObsoleteRollupType", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "lastBatchSequenced", "type": "uint64" }], "name": "OnSequenceBatches", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "numBatch", "type": "uint64" }, { "indexed": false, "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "indexed": false, "internalType": "address", "name": "aggregator", "type": "address" }], "name": "OverridePendingState", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "storedStateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "provedStateRoot", "type": "bytes32" }], "name": "ProveNonDeterministicPendingState", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }], "name": "RoleAdminChanged", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleGranted", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleRevoked", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "newBatchFee", "type": "uint256" }], "name": "SetBatchFee", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint16", "name": "newMultiplierBatchFee", "type": "uint16" }], "name": "SetMultiplierBatchFee", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint64", "name": "newPendingStateTimeout", "type": "uint64" }], "name": "SetPendingStateTimeout", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newTrustedAggregator", "type": "address" }], "name": "SetTrustedAggregator", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint64", "name": "newTrustedAggregatorTimeout", "type": "uint64" }], "name": "SetTrustedAggregatorTimeout", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint64", "name": "newVerifyBatchTimeTarget", "type": "uint64" }], "name": "SetVerifyBatchTimeTarget", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint32", "name": "newRollupTypeID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "lastVerifiedBatchBeforeUpgrade", "type": "uint64" }], "name": "UpdateRollup", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "numBatch", "type": "uint64" }, { "indexed": false, "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "aggregator", "type": "address" }], "name": "VerifyBatches", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "numBatch", "type": "uint64" }, { "indexed": false, "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "aggregator", "type": "address" }], "name": "VerifyBatchesTrustedAggregator", "type": "event" }, { "inputs": [], "name": "DEFAULT_ADMIN_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "activateEmergencyState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "contract IPolygonRollupBase", "name": "rollupAddress", "type": "address" }, { "internalType": "contract IVerifierRollup", "name": "verifier", "type": "address" }, { "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "internalType": "bytes32", "name": "genesis", "type": "bytes32" }, { "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }], "name": "addExistingRollup", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "consensusImplementation", "type": "address" }, { "internalType": "contract IVerifierRollup", "name": "verifier", "type": "address" }, { "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }, { "internalType": "bytes32", "name": "genesis", "type": "bytes32" }, { "internalType": "string", "name": "description", "type": "string" }], "name": "addNewRollupType", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "bridgeAddress", "outputs": [{ "internalType": "contract IPolygonZkEVMBridge", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "calculateRewardPerBatch", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "chainID", "type": "uint64" }], "name": "chainIDToRollupID", "outputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }], "name": "consolidatePendingState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }, { "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "internalType": "address", "name": "admin", "type": "address" }, { "internalType": "address", "name": "sequencer", "type": "address" }, { "internalType": "address", "name": "gasTokenAddress", "type": "address" }, { "internalType": "string", "name": "sequencerURL", "type": "string" }, { "internalType": "string", "name": "networkName", "type": "string" }], "name": "createNewRollup", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "deactivateEmergencyState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "getBatchFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "getForcedBatchFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "oldStateRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }], "name": "getInputSnarkBytes", "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }], "name": "getLastVerifiedBatch", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }], "name": "getRoleAdmin", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "batchNum", "type": "uint64" }], "name": "getRollupBatchNumToStateRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "getRollupExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "batchNum", "type": "uint64" }], "name": "getRollupPendingStateTransitions", "outputs": [{ "components": [{ "internalType": "uint64", "name": "timestamp", "type": "uint64" }, { "internalType": "uint64", "name": "lastVerifiedBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }], "internalType": "struct LegacyZKEVMStateVariables.PendingState", "name": "", "type": "tuple" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "batchNum", "type": "uint64" }], "name": "getRollupSequencedBatches", "outputs": [{ "components": [{ "internalType": "bytes32", "name": "accInputHash", "type": "bytes32" }, { "internalType": "uint64", "name": "sequencedTimestamp", "type": "uint64" }, { "internalType": "uint64", "name": "previousLastBatchSequenced", "type": "uint64" }], "internalType": "struct LegacyZKEVMStateVariables.SequencedBatchData", "name": "", "type": "tuple" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "globalExitRootManager", "outputs": [{ "internalType": "contract IPolygonZkEVMGlobalExitRootV2", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "grantRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "hasRole", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "trustedAggregator", "type": "address" }, { "internalType": "uint64", "name": "_pendingStateTimeout", "type": "uint64" }, { "internalType": "uint64", "name": "_trustedAggregatorTimeout", "type": "uint64" }, { "internalType": "address", "name": "admin", "type": "address" }, { "internalType": "address", "name": "timelock", "type": "address" }, { "internalType": "address", "name": "emergencyCouncil", "type": "address" }, { "internalType": "contract PolygonZkEVMExistentEtrog", "name": "polygonZkEVM", "type": "address" }, { "internalType": "contract IVerifierRollup", "name": "zkEVMVerifier", "type": "address" }, { "internalType": "uint64", "name": "zkEVMForkID", "type": "uint64" }, { "internalType": "uint64", "name": "zkEVMChainID", "type": "uint64" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "isEmergencyState", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }], "name": "isPendingStateConsolidable", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastAggregationTimestamp", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastDeactivatedEmergencyStateTimestamp", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "multiplierBatchFee", "outputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }], "name": "obsoleteRollupType", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "newSequencedBatches", "type": "uint64" }, { "internalType": "bytes32", "name": "newAccInputHash", "type": "bytes32" }], "name": "onSequenceBatches", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "initPendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "finalPendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }, { "internalType": "bytes32[24]", "name": "proof", "type": "bytes32[24]" }], "name": "overridePendingState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "pendingStateTimeout", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "pol", "outputs": [{ "internalType": "contract IERC20Upgradeable", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "initPendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "finalPendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }, { "internalType": "bytes32[24]", "name": "proof", "type": "bytes32[24]" }], "name": "proveNonDeterministicPendingState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "renounceRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "revokeRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "rollupAddress", "type": "address" }], "name": "rollupAddressToID", "outputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "rollupCount", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }], "name": "rollupIDToRollupData", "outputs": [{ "internalType": "contract IPolygonRollupBase", "name": "rollupContract", "type": "address" }, { "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "internalType": "contract IVerifierRollup", "name": "verifier", "type": "address" }, { "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "internalType": "bytes32", "name": "lastLocalExitRoot", "type": "bytes32" }, { "internalType": "uint64", "name": "lastBatchSequenced", "type": "uint64" }, { "internalType": "uint64", "name": "lastVerifiedBatch", "type": "uint64" }, { "internalType": "uint64", "name": "lastPendingState", "type": "uint64" }, { "internalType": "uint64", "name": "lastPendingStateConsolidated", "type": "uint64" }, { "internalType": "uint64", "name": "lastVerifiedBatchBeforeUpgrade", "type": "uint64" }, { "internalType": "uint64", "name": "rollupTypeID", "type": "uint64" }, { "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "rollupTypeCount", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }], "name": "rollupTypeMap", "outputs": [{ "internalType": "address", "name": "consensusImplementation", "type": "address" }, { "internalType": "contract IVerifierRollup", "name": "verifier", "type": "address" }, { "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }, { "internalType": "bool", "name": "obsolete", "type": "bool" }, { "internalType": "bytes32", "name": "genesis", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "newBatchFee", "type": "uint256" }], "name": "setBatchFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint16", "name": "newMultiplierBatchFee", "type": "uint16" }], "name": "setMultiplierBatchFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "newPendingStateTimeout", "type": "uint64" }], "name": "setPendingStateTimeout", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "newTrustedAggregatorTimeout", "type": "uint64" }], "name": "setTrustedAggregatorTimeout", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "newVerifyBatchTimeTarget", "type": "uint64" }], "name": "setVerifyBatchTimeTarget", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "totalSequencedBatches", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "totalVerifiedBatches", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "trustedAggregatorTimeout", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "contract ITransparentUpgradeableProxy", "name": "rollupContract", "type": "address" }, { "internalType": "uint32", "name": "newRollupTypeID", "type": "uint32" }, { "internalType": "bytes", "name": "upgradeData", "type": "bytes" }], "name": "updateRollup", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "verifyBatchTimeTarget", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }, { "internalType": "address", "name": "beneficiary", "type": "address" }, { "internalType": "bytes32[24]", "name": "proof", "type": "bytes32[24]" }], "name": "verifyBatches", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }, { "internalType": "address", "name": "beneficiary", "type": "address" }, { "internalType": "bytes32[24]", "name": "proof", "type": "bytes32[24]" }], "name": "verifyBatchesTrustedAggregator", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/mainnet/PolygonZkEVMBridge.ts":
/*!************************************************!*\
  !*** ./src/abis/mainnet/PolygonZkEVMBridge.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [], "name": "AlreadyClaimed", "type": "error" }, { "inputs": [], "name": "AmountDoesNotMatchMsgValue", "type": "error" }, { "inputs": [], "name": "DestinationNetworkInvalid", "type": "error" }, { "inputs": [], "name": "EtherTransferFailed", "type": "error" }, { "inputs": [], "name": "FailedTokenWrappedDeployment", "type": "error" }, { "inputs": [], "name": "GasTokenNetworkMustBeZeroOnEther", "type": "error" }, { "inputs": [], "name": "GlobalExitRootInvalid", "type": "error" }, { "inputs": [], "name": "InvalidSmtProof", "type": "error" }, { "inputs": [], "name": "MerkleTreeFull", "type": "error" }, { "inputs": [], "name": "MessageFailed", "type": "error" }, { "inputs": [], "name": "MsgValueNotZero", "type": "error" }, { "inputs": [], "name": "NativeTokenIsEther", "type": "error" }, { "inputs": [], "name": "NoValueInMessagesOnGasTokenNetworks", "type": "error" }, { "inputs": [], "name": "NotValidAmount", "type": "error" }, { "inputs": [], "name": "NotValidOwner", "type": "error" }, { "inputs": [], "name": "NotValidSignature", "type": "error" }, { "inputs": [], "name": "NotValidSpender", "type": "error" }, { "inputs": [], "name": "OnlyEmergencyState", "type": "error" }, { "inputs": [], "name": "OnlyNotEmergencyState", "type": "error" }, { "inputs": [], "name": "OnlyRollupManager", "type": "error" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint8", "name": "leafType", "type": "uint8" }, { "indexed": false, "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "originAddress", "type": "address" }, { "indexed": false, "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "destinationAddress", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "bytes", "name": "metadata", "type": "bytes" }, { "indexed": false, "internalType": "uint32", "name": "depositCount", "type": "uint32" }], "name": "BridgeEvent", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "globalIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "originAddress", "type": "address" }, { "indexed": false, "internalType": "address", "name": "destinationAddress", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "ClaimEvent", "type": "event" }, { "anonymous": false, "inputs": [], "name": "EmergencyStateActivated", "type": "event" }, { "anonymous": false, "inputs": [], "name": "EmergencyStateDeactivated", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint8", "name": "version", "type": "uint8" }], "name": "Initialized", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "originTokenAddress", "type": "address" }, { "indexed": false, "internalType": "address", "name": "wrappedTokenAddress", "type": "address" }, { "indexed": false, "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "NewWrappedToken", "type": "event" }, { "inputs": [], "name": "BASE_INIT_BYTECODE_WRAPPED_TOKEN", "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "WETHToken", "outputs": [{ "internalType": "contract TokenWrapped", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "activateEmergencyState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "address", "name": "token", "type": "address" }, { "internalType": "bool", "name": "forceUpdateGlobalExitRoot", "type": "bool" }, { "internalType": "bytes", "name": "permitData", "type": "bytes" }], "name": "bridgeAsset", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "bool", "name": "forceUpdateGlobalExitRoot", "type": "bool" }, { "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "bridgeMessage", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amountWETH", "type": "uint256" }, { "internalType": "bool", "name": "forceUpdateGlobalExitRoot", "type": "bool" }, { "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "bridgeMessageWETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "leafHash", "type": "bytes32" }, { "internalType": "bytes32[32]", "name": "smtProof", "type": "bytes32[32]" }, { "internalType": "uint32", "name": "index", "type": "uint32" }], "name": "calculateRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "pure", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }, { "internalType": "address", "name": "token", "type": "address" }], "name": "calculateTokenWrapperAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32[32]", "name": "smtProofLocalExitRoot", "type": "bytes32[32]" }, { "internalType": "bytes32[32]", "name": "smtProofRollupExitRoot", "type": "bytes32[32]" }, { "internalType": "uint256", "name": "globalIndex", "type": "uint256" }, { "internalType": "bytes32", "name": "mainnetExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "rollupExitRoot", "type": "bytes32" }, { "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "claimAsset", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32[32]", "name": "smtProofLocalExitRoot", "type": "bytes32[32]" }, { "internalType": "bytes32[32]", "name": "smtProofRollupExitRoot", "type": "bytes32[32]" }, { "internalType": "uint256", "name": "globalIndex", "type": "uint256" }, { "internalType": "bytes32", "name": "mainnetExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "rollupExitRoot", "type": "bytes32" }, { "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originAddress", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "claimMessage", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "claimedBitMap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "deactivateEmergencyState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "depositCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "gasTokenAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "gasTokenMetadata", "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "gasTokenNetwork", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint8", "name": "leafType", "type": "uint8" }, { "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originAddress", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bytes32", "name": "metadataHash", "type": "bytes32" }], "name": "getLeafValue", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "pure", "type": "function" }, { "inputs": [], "name": "getRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }], "name": "getTokenMetadata", "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }], "name": "getTokenWrappedAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "globalExitRootManager", "outputs": [{ "internalType": "contract IBasePolygonZkEVMGlobalExitRoot", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "_networkID", "type": "uint32" }, { "internalType": "address", "name": "_gasTokenAddress", "type": "address" }, { "internalType": "uint32", "name": "_gasTokenNetwork", "type": "uint32" }, { "internalType": "contract IBasePolygonZkEVMGlobalExitRoot", "name": "_globalExitRootManager", "type": "address" }, { "internalType": "address", "name": "_polygonRollupManager", "type": "address" }, { "internalType": "bytes", "name": "_gasTokenMetadata", "type": "bytes" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "leafIndex", "type": "uint32" }, { "internalType": "uint32", "name": "sourceBridgeNetwork", "type": "uint32" }], "name": "isClaimed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "isEmergencyState", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastUpdatedDepositCount", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "networkID", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "polygonRollupManager", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }, { "internalType": "string", "name": "name", "type": "string" }, { "internalType": "string", "name": "symbol", "type": "string" }, { "internalType": "uint8", "name": "decimals", "type": "uint8" }], "name": "precalculatedWrapperAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "tokenInfoToWrappedToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "updateGlobalExitRoot", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "leafHash", "type": "bytes32" }, { "internalType": "bytes32[32]", "name": "smtProof", "type": "bytes32[32]" }, { "internalType": "uint32", "name": "index", "type": "uint32" }, { "internalType": "bytes32", "name": "root", "type": "bytes32" }], "name": "verifyMerkleProof", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "pure", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "wrappedTokenToTokenInfo", "outputs": [{ "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }], "stateMutability": "view", "type": "function" }];


/***/ }),

/***/ "./src/abis/mainnet/PolygonZkEVMGlobalExitRoot.ts":
/*!********************************************************!*\
  !*** ./src/abis/mainnet/PolygonZkEVMGlobalExitRoot.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "address", "name": "_rollupAddress", "type": "address" }, { "internalType": "address", "name": "_bridgeAddress", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [], "name": "OnlyAllowedContracts", "type": "error" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "mainnetExitRoot", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "rollupExitRoot", "type": "bytes32" }], "name": "UpdateGlobalExitRoot", "type": "event" }, { "inputs": [], "name": "bridgeAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "getLastGlobalExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "globalExitRootMap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastMainnetExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastRollupExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "rollupAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "newRoot", "type": "bytes32" }], "name": "updateExitRoot", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/mainnet/PolygonZkEVMGlobalExitRootL2.ts":
/*!**********************************************************!*\
  !*** ./src/abis/mainnet/PolygonZkEVMGlobalExitRootL2.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "address", "name": "_bridgeAddress", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [], "name": "OnlyAllowedContracts", "type": "error" }, { "inputs": [], "name": "bridgeAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "globalExitRootMap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastRollupExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "newRoot", "type": "bytes32" }], "name": "updateExitRoot", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/mainnet/ZkEVMBridgeAdapter.ts":
/*!************************************************!*\
  !*** ./src/abis/mainnet/ZkEVMBridgeAdapter.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bool", "name": "forceUpdateGlobalExitRoot", "type": "bool" }], "name": "bridgeToken", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/mainnet/ZkEVMWrapper.ts":
/*!******************************************!*\
  !*** ./src/abis/mainnet/ZkEVMWrapper.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "contract IZkEVMBridge", "name": "zkEVMBridge_", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "deposit", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "deposit", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "contract IDai", "name": "token", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "nonce", "type": "uint256" }, { "internalType": "uint256", "name": "expiry", "type": "uint256" }, { "internalType": "bool", "name": "allowed", "type": "bool" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "deposit", "outputs": [], "stateMutability": "payable", "type": "function" }];


/***/ }),

/***/ "./src/abis/mainnet/index.ts":
/*!***********************************!*\
  !*** ./src/abis/mainnet/index.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ERC20_1 = __importDefault(__webpack_require__(/*! ./ERC20 */ "./src/abis/mainnet/ERC20.ts"));
var PolygonZkEVM_1 = __importDefault(__webpack_require__(/*! ./PolygonZkEVM */ "./src/abis/mainnet/PolygonZkEVM.ts"));
var PolygonZkEVMBridge_1 = __importDefault(__webpack_require__(/*! ./PolygonZkEVMBridge */ "./src/abis/mainnet/PolygonZkEVMBridge.ts"));
var PolygonZkEVMGlobalExitRoot_1 = __importDefault(__webpack_require__(/*! ./PolygonZkEVMGlobalExitRoot */ "./src/abis/mainnet/PolygonZkEVMGlobalExitRoot.ts"));
var PolygonZkEVMGlobalExitRootL2_1 = __importDefault(__webpack_require__(/*! ./PolygonZkEVMGlobalExitRootL2 */ "./src/abis/mainnet/PolygonZkEVMGlobalExitRootL2.ts"));
var ZkEVMBridgeAdapter_1 = __importDefault(__webpack_require__(/*! ./ZkEVMBridgeAdapter */ "./src/abis/mainnet/ZkEVMBridgeAdapter.ts"));
var ZkEVMWrapper_1 = __importDefault(__webpack_require__(/*! ./ZkEVMWrapper */ "./src/abis/mainnet/ZkEVMWrapper.ts"));
var BridgeExtension_1 = __importDefault(__webpack_require__(/*! ./BridgeExtension */ "./src/abis/mainnet/BridgeExtension.ts"));
var GasPorter_1 = __importDefault(__webpack_require__(/*! ./GasPorter */ "./src/abis/mainnet/GasPorter.ts"));
var GenericVaultBridgeToken_1 = __importDefault(__webpack_require__(/*! ./GenericVaultBridgeToken */ "./src/abis/mainnet/GenericVaultBridgeToken.ts"));
exports["default"] = {
    GasPorter: GasPorter_1.default,
    ERC20: ERC20_1.default,
    PolygonZkEVM: PolygonZkEVM_1.default,
    PolygonZkEVMBridge: PolygonZkEVMBridge_1.default,
    PolygonZkEVMGlobalExitRoot: PolygonZkEVMGlobalExitRoot_1.default,
    PolygonZkEVMGlobalExitRootL2: PolygonZkEVMGlobalExitRootL2_1.default,
    ZkEVMBridgeAdapter: ZkEVMBridgeAdapter_1.default,
    ZkEVMWrapper: ZkEVMWrapper_1.default,
    BridgeExtension: BridgeExtension_1.default,
    GenericVaultBridgeToken: GenericVaultBridgeToken_1.default
};


/***/ }),

/***/ "./src/abis/testnet/BridgeExtension.ts":
/*!*********************************************!*\
  !*** ./src/abis/testnet/BridgeExtension.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [
    { "type": "constructor", "inputs": [], "stateMutability": "nonpayable" },
    { "type": "function", "name": "bridge",
        "inputs": [],
        "outputs": [
            { "name": "", "type": "address", "internalType": "contract PolygonZkEVMBridgeV2" }
        ], "stateMutability": "view"
    },
    { "type": "function", "name": "bridgeAndCall",
        "inputs": [
            { "name": "token", "type": "address", "internalType": "address" },
            { "name": "amount", "type": "uint256", "internalType": "uint256" },
            { "name": "permitData", "type": "bytes", "internalType": "bytes" },
            { "name": "destinationNetwork", "type": "uint32", "internalType": "uint32" },
            { "name": "callAddress", "type": "address", "internalType": "address" },
            { "name": "fallbackAddress", "type": "address", "internalType": "address" },
            { "name": "callData", "type": "bytes", "internalType": "bytes" },
            { "name": "forceUpdateGlobalExitRoot", "type": "bool", "internalType": "bool" }
        ], "outputs": [], "stateMutability": "payable"
    },
    { "type": "function", "name": "initialize", "inputs": [{ "name": "bridge_", "type": "address", "internalType": "address" }], "outputs": [], "stateMutability": "nonpayable" },
    { "type": "function", "name": "onMessageReceived", "inputs": [{ "name": "originAddress", "type": "address", "internalType": "address" }, { "name": "originNetwork", "type": "uint32", "internalType": "uint32" }, { "name": "data", "type": "bytes", "internalType": "bytes" }], "outputs": [], "stateMutability": "payable" },
    { "type": "event", "name": "Initialized", "inputs": [{ "name": "version", "type": "uint8", "indexed": false, "internalType": "uint8" }], "anonymous": false },
    { "type": "error", "name": "AmountDoesNotMatchMsgValue", "inputs": [] },
    { "type": "error", "name": "InvalidAddress", "inputs": [] },
    { "type": "error", "name": "InvalidDepositIndex", "inputs": [] },
    { "type": "error", "name": "OriginMustBeBridgeExtension", "inputs": [] },
    { "type": "error", "name": "SenderMustBeBridge", "inputs": [] },
    { "type": "error", "name": "UnclaimedAsset", "inputs": [] }
];


/***/ }),

/***/ "./src/abis/testnet/ERC20.ts":
/*!***********************************!*\
  !*** ./src/abis/testnet/ERC20.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "string", "name": "name", "type": "string" }, { "internalType": "string", "name": "symbol", "type": "string" }, { "internalType": "address", "name": "initialAccount", "type": "address" }, { "internalType": "uint256", "name": "initialBalance", "type": "uint256" }], "stateMutability": "payable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" }, { "inputs": [], "name": "EIP712DOMAIN_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "DOMAIN_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "NAME_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "PERMIT_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "VERSION_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "approveInternal", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burn", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "getChainId", "outputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "nonces", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transferInternal", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/testnet/GasPorter.ts":
/*!***************************************!*\
  !*** ./src/abis/testnet/GasPorter.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [
    {
        "type": "constructor",
        "inputs": [
            {
                "name": "lxlyBridge_",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "dex_",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "settlementToken_",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "nonpayable"
    },
    {
        "type": "receive",
        "stateMutability": "payable"
    },
    {
        "type": "function",
        "name": "WETHToken",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "bridgeAssetAndGas",
        "inputs": [
            {
                "name": "requestConversion",
                "type": "bool",
                "internalType": "bool"
            },
            {
                "name": "forceUpdateGlobalExitRoot",
                "type": "bool",
                "internalType": "bool"
            },
            {
                "name": "destinationNetwork",
                "type": "uint32",
                "internalType": "uint32"
            },
            {
                "name": "destinationAddress",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "trackingNumber",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "gasset",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "gassetSource",
                "type": "uint8",
                "internalType": "enum GasPorter.GassetSource"
            },
            {
                "name": "gassetPermitData",
                "type": "bytes",
                "internalType": "bytes"
            },
            {
                "name": "gassetAmount",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "swapCalldata",
                "type": "bytes",
                "internalType": "bytes"
            },
            {
                "name": "token",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "tokenAmount",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "tokenPermitData",
                "type": "bytes",
                "internalType": "bytes"
            }
        ],
        "outputs": [],
        "stateMutability": "payable"
    },
    {
        "type": "function",
        "name": "conversionNonce",
        "inputs": [
            {
                "name": "user",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "originNetworkID",
                "type": "uint32",
                "internalType": "uint32"
            }
        ],
        "outputs": [
            {
                "name": "",
                "type": "uint256",
                "internalType": "uint256"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "convertGasset",
        "inputs": [
            {
                "name": "authorization",
                "type": "tuple",
                "internalType": "struct GasPorter.ConversionAuthorization",
                "components": [
                    {
                        "name": "data",
                        "type": "tuple",
                        "internalType": "struct GasPorter.ConversionAuthorizationData",
                        "components": [
                            {
                                "name": "originNetworkID",
                                "type": "uint32",
                                "internalType": "uint32"
                            },
                            {
                                "name": "trackingNumber",
                                "type": "uint256",
                                "internalType": "uint256"
                            },
                            {
                                "name": "signer",
                                "type": "address",
                                "internalType": "address"
                            },
                            {
                                "name": "conversionNonce",
                                "type": "uint256",
                                "internalType": "uint256"
                            },
                            {
                                "name": "gassetDestinationAddress",
                                "type": "address",
                                "internalType": "address"
                            },
                            {
                                "name": "gassetDestinationPermitData",
                                "type": "bytes",
                                "internalType": "bytes"
                            },
                            {
                                "name": "gassetDestinationAmount",
                                "type": "uint256",
                                "internalType": "uint256"
                            },
                            {
                                "name": "destinationSwapCalldata",
                                "type": "bytes",
                                "internalType": "bytes"
                            },
                            {
                                "name": "destinationNativeTokenMinimumAmount",
                                "type": "uint256",
                                "internalType": "uint256"
                            },
                            {
                                "name": "deadline",
                                "type": "uint256",
                                "internalType": "uint256"
                            }
                        ]
                    },
                    {
                        "name": "signature",
                        "type": "bytes",
                        "internalType": "bytes"
                    }
                ]
            }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
    },
    {
        "type": "function",
        "name": "convertGasset_",
        "inputs": [
            {
                "name": "authorizationData",
                "type": "tuple",
                "internalType": "struct GasPorter.ConversionAuthorizationData",
                "components": [
                    {
                        "name": "originNetworkID",
                        "type": "uint32",
                        "internalType": "uint32"
                    },
                    {
                        "name": "trackingNumber",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "signer",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "conversionNonce",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "gassetDestinationAddress",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "gassetDestinationPermitData",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "gassetDestinationAmount",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "destinationSwapCalldata",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "destinationNativeTokenMinimumAmount",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "deadline",
                        "type": "uint256",
                        "internalType": "uint256"
                    }
                ]
            },
            {
                "name": "signer",
                "type": "address",
                "internalType": "address"
            }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
    },
    {
        "type": "function",
        "name": "determineConversion",
        "inputs": [
            {
                "name": "destinationNetworkGasTokenNetwork",
                "type": "uint32",
                "internalType": "uint32"
            },
            {
                "name": "destinationNetworkGasTokenAddress",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "gasset",
                "type": "address",
                "internalType": "address"
            }
        ],
        "outputs": [
            {
                "name": "conversionRequired",
                "type": "bool",
                "internalType": "bool"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "determineGasset",
        "inputs": [
            {
                "name": "destinationNetworkGasTokenNetwork",
                "type": "uint32",
                "internalType": "uint32"
            },
            {
                "name": "destinationNetworkGasTokenAddress",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "gassetType",
                "type": "uint8",
                "internalType": "enum GasPorter.GassetType"
            }
        ],
        "outputs": [
            {
                "name": "gasset",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "dex",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "eip712Domain",
        "inputs": [],
        "outputs": [
            {
                "name": "fields",
                "type": "bytes1",
                "internalType": "bytes1"
            },
            {
                "name": "name",
                "type": "string",
                "internalType": "string"
            },
            {
                "name": "version",
                "type": "string",
                "internalType": "string"
            },
            {
                "name": "chainId",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "verifyingContract",
                "type": "address",
                "internalType": "address"
            },
            {
                "name": "salt",
                "type": "bytes32",
                "internalType": "bytes32"
            },
            {
                "name": "extensions",
                "type": "uint256[]",
                "internalType": "uint256[]"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "gasTokenAddress",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "gasTokenNetwork",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "uint32",
                "internalType": "uint32"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "initialize",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
    },
    {
        "type": "function",
        "name": "invalidateConversionNonce",
        "inputs": [
            {
                "name": "originNetworkID",
                "type": "uint32",
                "internalType": "uint32"
            }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
    },
    {
        "type": "function",
        "name": "lxlyBridge",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "contract ILxlyBridge"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "networkID",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "uint32",
                "internalType": "uint32"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "plotRoute",
        "inputs": [
            {
                "name": "cargo",
                "type": "tuple",
                "internalType": "struct GasPorter.Cargo",
                "components": [
                    {
                        "name": "msgValue",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "destinationNetwork",
                        "type": "uint32",
                        "internalType": "uint32"
                    },
                    {
                        "name": "destinationNetworkGasTokenNetwork",
                        "type": "uint32",
                        "internalType": "uint32"
                    },
                    {
                        "name": "destinationNetworkGasTokenAddress",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "destinationAddress",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "destinationGasPorterDex",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "gassetType",
                        "type": "uint8",
                        "internalType": "enum GasPorter.GassetType"
                    },
                    {
                        "name": "gassetSource",
                        "type": "uint8",
                        "internalType": "enum GasPorter.GassetSource"
                    },
                    {
                        "name": "gassetAmount",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "token",
                        "type": "address",
                        "internalType": "address"
                    },
                    {
                        "name": "tokenAmount",
                        "type": "uint256",
                        "internalType": "uint256"
                    },
                    {
                        "name": "gassetPermitData",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "swapCalldata",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "tokenPermitData",
                        "type": "bytes",
                        "internalType": "bytes"
                    },
                    {
                        "name": "forceUpdateGlobalExitRoot",
                        "type": "bool",
                        "internalType": "bool"
                    },
                    {
                        "name": "trackingNumber",
                        "type": "uint256",
                        "internalType": "uint256"
                    }
                ]
            }
        ],
        "outputs": [
            {
                "name": "msgValue",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "callData",
                "type": "bytes",
                "internalType": "bytes"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "settlementToken",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "address",
                "internalType": "address"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "settlementTokenIsNativeToken",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "bool",
                "internalType": "bool"
            }
        ],
        "stateMutability": "view"
    },
    {
        "type": "function",
        "name": "version",
        "inputs": [],
        "outputs": [
            {
                "name": "",
                "type": "string",
                "internalType": "string"
            }
        ],
        "stateMutability": "pure"
    },
    {
        "type": "event",
        "name": "ConversionFailed",
        "inputs": [
            {
                "name": "originNetworkID",
                "type": "uint32",
                "indexed": true,
                "internalType": "uint32"
            },
            {
                "name": "trackingNumber",
                "type": "uint256",
                "indexed": true,
                "internalType": "uint256"
            },
            {
                "name": "signer",
                "type": "address",
                "indexed": true,
                "internalType": "address"
            },
            {
                "name": "msgSender",
                "type": "address",
                "indexed": false,
                "internalType": "address"
            },
            {
                "name": "reason",
                "type": "bytes",
                "indexed": false,
                "internalType": "bytes"
            }
        ],
        "anonymous": false
    },
    {
        "type": "event",
        "name": "ConversionRequested",
        "inputs": [
            {
                "name": "trackingNumber",
                "type": "uint256",
                "indexed": true,
                "internalType": "uint256"
            },
            {
                "name": "destinationNetwork",
                "type": "uint32",
                "indexed": false,
                "internalType": "uint32"
            },
            {
                "name": "destinationAddress",
                "type": "address",
                "indexed": false,
                "internalType": "address"
            },
            {
                "name": "gasset",
                "type": "address",
                "indexed": false,
                "internalType": "address"
            },
            {
                "name": "bridgedGassetAmount",
                "type": "uint256",
                "indexed": false,
                "internalType": "uint256"
            }
        ],
        "anonymous": false
    },
    {
        "type": "event",
        "name": "EIP712DomainChanged",
        "inputs": [],
        "anonymous": false
    },
    {
        "type": "event",
        "name": "GassetConverted",
        "inputs": [
            {
                "name": "originNetworkID",
                "type": "uint32",
                "indexed": true,
                "internalType": "uint32"
            },
            {
                "name": "trackingNumber",
                "type": "uint256",
                "indexed": true,
                "internalType": "uint256"
            },
            {
                "name": "signer",
                "type": "address",
                "indexed": true,
                "internalType": "address"
            }
        ],
        "anonymous": false
    },
    {
        "type": "event",
        "name": "Initialized",
        "inputs": [
            {
                "name": "version",
                "type": "uint64",
                "indexed": false,
                "internalType": "uint64"
            }
        ],
        "anonymous": false
    },
    {
        "type": "error",
        "name": "AddressEmptyCode",
        "inputs": [
            {
                "name": "target",
                "type": "address",
                "internalType": "address"
            }
        ]
    },
    {
        "type": "error",
        "name": "AddressInsufficientBalance",
        "inputs": [
            {
                "name": "account",
                "type": "address",
                "internalType": "address"
            }
        ]
    },
    {
        "type": "error",
        "name": "AuthorizationExpired",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDeliverNativeTokenToRecipient",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineConversionBecauseRepresentativeTokenDoesNotExist",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineConversionForThisGasset",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineConversionMakeSureDestinationNetworkParametersAreCorrect",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineGassetBecauseRepresentativeTokenDoesNotExist",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotDetermineGassetMakeSureDestinationNetworkParametersAreCorrect",
        "inputs": []
    },
    {
        "type": "error",
        "name": "CannotReturnExcessiveMessageValueToYou",
        "inputs": []
    },
    {
        "type": "error",
        "name": "DestinationAddressCannotBeAddressZero",
        "inputs": []
    },
    {
        "type": "error",
        "name": "DestinationNetworkCannotBeCurrentNetwork",
        "inputs": []
    },
    {
        "type": "error",
        "name": "ECDSAInvalidSignature",
        "inputs": []
    },
    {
        "type": "error",
        "name": "ECDSAInvalidSignatureLength",
        "inputs": [
            {
                "name": "length",
                "type": "uint256",
                "internalType": "uint256"
            }
        ]
    },
    {
        "type": "error",
        "name": "ECDSAInvalidSignatureS",
        "inputs": [
            {
                "name": "s",
                "type": "bytes32",
                "internalType": "bytes32"
            }
        ]
    },
    {
        "type": "error",
        "name": "FailedInnerCall",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GasPorterOnCurrentNetworkDoesNotSupportDexSwapAsGassetSourceYet",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GasPorterOnCurrentNetworkDoesNotSupportGassetConversionYet",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GasPorterOnDestinationNetworkDoesNotSupportGassetConversionYet",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetAmountCannotBeZero",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetCannotBeDolphinAddressDidYouMeanAddressZero",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetPermitDataMustBeEmptyWhenGassetIsNativeToken",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetTypeCannotBeERC20TokenWhenNativeTokensAreTheSame",
        "inputs": []
    },
    {
        "type": "error",
        "name": "GassetTypeCannotBeNativeTokenWhenNativeTokensAreDifferent",
        "inputs": []
    },
    {
        "type": "error",
        "name": "InsufficientAmountInERC20Permit",
        "inputs": [
            {
                "name": "amount",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "minimumAmount",
                "type": "uint256",
                "internalType": "uint256"
            }
        ]
    },
    {
        "type": "error",
        "name": "InsufficientMessageValue",
        "inputs": [
            {
                "name": "amount",
                "type": "uint256",
                "internalType": "uint256"
            },
            {
                "name": "minimumAmount",
                "type": "uint256",
                "internalType": "uint256"
            }
        ]
    },
    {
        "type": "error",
        "name": "InvalidConversionNonce",
        "inputs": []
    },
    {
        "type": "error",
        "name": "InvalidGassetTypeAndGassetSourceCombination",
        "inputs": []
    },
    {
        "type": "error",
        "name": "InvalidInitialization",
        "inputs": []
    },
    {
        "type": "error",
        "name": "InvalidToken",
        "inputs": []
    },
    {
        "type": "error",
        "name": "NotInitializing",
        "inputs": []
    },
    {
        "type": "error",
        "name": "OriginNetworkCannotBeCurrentNetwork",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SafeERC20FailedOperation",
        "inputs": [
            {
                "name": "token",
                "type": "address",
                "internalType": "address"
            }
        ]
    },
    {
        "type": "error",
        "name": "SignerInAuthorizationDataAndActualSignerDoNotMatch",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SwapCalldataCannotBeEmptyWhenGassetSourceIsDexSwap",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SwapCalldataCannotBeProvidedWhenMessageValueIsProvided",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SwapCalldataMustBeEmptyWhenGassetSourceIsNotDexSwap",
        "inputs": []
    },
    {
        "type": "error",
        "name": "SwapFailedBecauseDexGaveInsufficientAmount",
        "inputs": [
            {
                "name": "amount",
                "type": "uint256",
                "internalType": "uint256"
            }
        ]
    },
    {
        "type": "error",
        "name": "SwapFailedBecauseDexRevertedWithoutExplanation",
        "inputs": []
    },
    {
        "type": "error",
        "name": "ThisFunctionCanOnlyBeCalledByGasPorter",
        "inputs": []
    },
    {
        "type": "error",
        "name": "TokenAmountCannotBeZero",
        "inputs": []
    },
    {
        "type": "error",
        "name": "TokenPermitDataMustBeEmptyWhenAssetAndGassetAreTheSameAndGassetPermitDataIsProvided",
        "inputs": []
    },
    {
        "type": "error",
        "name": "TokenPermitDataMustBeEmptyWhenAssetIsNativeToken",
        "inputs": []
    },
    {
        "type": "error",
        "name": "UnknownFunctionSelectorInERC20Permit",
        "inputs": []
    }
];


/***/ }),

/***/ "./src/abis/testnet/GenericVaultBridgeToken.ts":
/*!*****************************************************!*\
  !*** ./src/abis/testnet/GenericVaultBridgeToken.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [
    {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessControlBadConfirmation",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "neededRole",
                type: "bytes32"
            }
        ],
        name: "AccessControlUnauthorizedAccount",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "availableAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requestedAssets",
                type: "uint256"
            }
        ],
        name: "AssetsTooLarge",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "requiredAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "receivedAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "assetsInMigrationFund",
                type: "uint256"
            }
        ],
        name: "CannotCompleteMigration",
        type: "error"
    },
    {
        inputs: [],
        name: "CannotRebalanceReserve",
        type: "error"
    },
    {
        inputs: [],
        name: "ContractNotSupportedOnThisNetwork",
        type: "error"
    },
    {
        inputs: [],
        name: "ECDSAInvalidSignature",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "length",
                type: "uint256"
            }
        ],
        name: "ECDSAInvalidSignatureLength",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }
        ],
        name: "ECDSAInvalidSignatureS",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "allowance",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "needed",
                type: "uint256"
            }
        ],
        name: "ERC20InsufficientAllowance",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "sender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "balance",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "needed",
                type: "uint256"
            }
        ],
        name: "ERC20InsufficientBalance",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "approver",
                type: "address"
            }
        ],
        name: "ERC20InvalidApprover",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "ERC20InvalidReceiver",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "sender",
                type: "address"
            }
        ],
        name: "ERC20InvalidSender",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            }
        ],
        name: "ERC20InvalidSpender",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }
        ],
        name: "ERC2612ExpiredSignature",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signer",
                type: "address"
            },
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "ERC2612InvalidSigner",
        type: "error"
    },
    {
        inputs: [],
        name: "EnforcedPause",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "burnedShares",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "withdrawnAssets",
                type: "uint256"
            }
        ],
        name: "ExcessiveYieldVaultSharesBurned",
        type: "error"
    },
    {
        inputs: [],
        name: "ExpectedPause",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "mintedShares",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requiredShares",
                type: "uint256"
            }
        ],
        name: "IncorrectAmountOfSharesMinted",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "redeemedShares",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requiredShares",
                type: "uint256"
            }
        ],
        name: "IncorrectAmountOfSharesRedeemed",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "msgValue",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requestedAssets",
                type: "uint256"
            }
        ],
        name: "IncorrectMsgValue",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "requestedAssets",
                type: "uint256"
            }
        ],
        name: "InsufficientUnderlyingTokenReceived",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "depositedAssets",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "mintedShares",
                type: "uint256"
            }
        ],
        name: "InsufficientYieldVaultSharesMinted",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "currentNonce",
                type: "uint256"
            }
        ],
        name: "InvalidAccountNonce",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "minimumAmount",
                type: "uint256"
            }
        ],
        name: "InvalidAmountInERC20Permit",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidAssets",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidDestinationNetworkId",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidInitialization",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidInitializer",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLxLyBridge",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidMigrationManager",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidMinimumReservePercentage",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidName",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidOriginNetwork",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidOwner",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "expectedOwner",
                type: "address"
            }
        ],
        name: "InvalidOwnerInERC20Permit",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidPermitData",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidReceiver",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "selector",
                type: "bytes4"
            }
        ],
        name: "InvalidSelectorInERC20Permit",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidShares",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "address",
                name: "expectedSpender",
                type: "address"
            }
        ],
        name: "InvalidSpenderInERC20Permit",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidSymbol",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidUnderlyingToken",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidVaultBridgeTokenPart2",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidYieldRecipient",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidYieldVault",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidYieldVaultMaximumSlippagePercentage",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assetsToDeposit",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "minimumYieldVaultDeposit",
                type: "uint256"
            }
        ],
        name: "MinimumYieldVaultDepositNotMet",
        type: "error"
    },
    {
        inputs: [],
        name: "NoNeedToRebalanceReserve",
        type: "error"
    },
    {
        inputs: [],
        name: "NoYield",
        type: "error"
    },
    {
        inputs: [],
        name: "NotInitializing",
        type: "error"
    },
    {
        inputs: [],
        name: "ReentrancyGuardReentrantCall",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "token",
                type: "address"
            }
        ],
        name: "SafeERC20FailedOperation",
        type: "error"
    },
    {
        inputs: [],
        name: "Unauthorized",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes"
            }
        ],
        name: "UnknownError",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "functionSelector",
                type: "bytes4"
            }
        ],
        name: "UnknownFunction",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assetsToDeposit",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "depositLimit",
                type: "uint256"
            }
        ],
        name: "YieldVaultDepositFailed",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "sharesToRedeem",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "redemptionLimit",
                type: "uint256"
            }
        ],
        name: "YieldVaultRedemptionFailed",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assetsToWithdraw",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "withdrawalLimit",
                type: "uint256"
            }
        ],
        name: "YieldVaultWithdrawalFailed",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Approval",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "vbTokenAmount",
                type: "uint256"
            }
        ],
        name: "Burned",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "sender",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "Deposit",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "who",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "DonatedAsYield",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "who",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "DonatedForCompletingMigration",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint64",
                name: "version",
                type: "uint64"
            }
        ],
        name: "Initialized",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint32",
                name: "originNetwork",
                type: "uint32"
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "migrationFeesFundUtilization",
                type: "uint256"
            }
        ],
        name: "MigrationCompleted",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "minimumReservePercentage",
                type: "uint256"
            }
        ],
        name: "MinimumReservePercentageSet",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "Paused",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "oldReservedAssets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "newReservedAssets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "reservePercentage",
                type: "uint256"
            }
        ],
        name: "ReserveRebalanced",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "previousAdminRole",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "newAdminRole",
                type: "bytes32"
            }
        ],
        name: "RoleAdminChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "address",
                name: "account",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "sender",
                type: "address"
            }
        ],
        name: "RoleGranted",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "address",
                name: "account",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "sender",
                type: "address"
            }
        ],
        name: "RoleRevoked",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Transfer",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "transferFeeCalculator",
                type: "address"
            }
        ],
        name: "TransferFeeCalculatorSet",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "Unpaused",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "sender",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "Withdraw",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "yieldRecipient",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "vbTokenAmount",
                type: "uint256"
            }
        ],
        name: "YieldCollected",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "yieldRecipient",
                type: "address"
            }
        ],
        name: "YieldRecipientSet",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "redeemedShares",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "receivedAssets",
                type: "uint256"
            }
        ],
        name: "YieldVaultDrained",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "slippagePercentage",
                type: "uint256"
            }
        ],
        name: "YieldVaultMaximumSlippagePercentageSet",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "yieldVault",
                type: "address"
            }
        ],
        name: "YieldVaultSet",
        type: "event"
    },
    {
        stateMutability: "payable",
        type: "fallback"
    },
    {
        inputs: [],
        name: "DEFAULT_ADMIN_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "DOMAIN_SEPARATOR",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "PAUSER_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "REBALANCER_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "YIELD_COLLECTOR_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "spender",
                type: "address"
            }
        ],
        name: "allowance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "asset",
        outputs: [
            {
                internalType: "address",
                name: "assetTokenAddress",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "backingDifference",
        outputs: [
            {
                internalType: "bool",
                name: "positive",
                type: "bool"
            },
            {
                internalType: "uint256",
                name: "difference",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32[32]",
                name: "smtProofLocalExitRoot",
                type: "bytes32[32]"
            },
            {
                internalType: "bytes32[32]",
                name: "smtProofRollupExitRoot",
                type: "bytes32[32]"
            },
            {
                internalType: "uint256",
                name: "globalIndex",
                type: "uint256"
            },
            {
                internalType: "bytes32",
                name: "mainnetExitRoot",
                type: "bytes32"
            },
            {
                internalType: "bytes32",
                name: "rollupExitRoot",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "destinationAddress",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "bytes",
                name: "metadata",
                type: "bytes"
            }
        ],
        name: "claimAndRedeem",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "convertToAssets",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "convertToShares",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "deposit",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "uint32",
                name: "destinationNetworkId",
                type: "uint32"
            },
            {
                internalType: "bool",
                name: "forceUpdateGlobalExitRoot",
                type: "bool"
            }
        ],
        name: "depositAndBridge",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "depositGasToken",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "destinationAddress",
                type: "address"
            },
            {
                internalType: "uint32",
                name: "destinationNetworkId",
                type: "uint32"
            },
            {
                internalType: "bool",
                name: "forceUpdateGlobalExitRoot",
                type: "bool"
            }
        ],
        name: "depositGasTokenAndBridge",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "bytes",
                name: "permitData",
                type: "bytes"
            }
        ],
        name: "depositWithPermit",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "uint32",
                name: "destinationNetworkId",
                type: "uint32"
            },
            {
                internalType: "bool",
                name: "forceUpdateGlobalExitRoot",
                type: "bool"
            },
            {
                internalType: "bytes",
                name: "permitData",
                type: "bytes"
            }
        ],
        name: "depositWithPermitAndBridge",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "eip712Domain",
        outputs: [
            {
                internalType: "bytes1",
                name: "fields",
                type: "bytes1"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            },
            {
                internalType: "string",
                name: "version",
                type: "string"
            },
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "verifyingContract",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32"
            },
            {
                internalType: "uint256[]",
                name: "extensions",
                type: "uint256[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            }
        ],
        name: "getRoleAdmin",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "grantRole",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "hasRole",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "initializer_",
                type: "address"
            },
            {
                components: [
                    {
                        internalType: "address",
                        name: "owner",
                        type: "address"
                    },
                    {
                        internalType: "string",
                        name: "name",
                        type: "string"
                    },
                    {
                        internalType: "string",
                        name: "symbol",
                        type: "string"
                    },
                    {
                        internalType: "address",
                        name: "underlyingToken",
                        type: "address"
                    },
                    {
                        internalType: "uint256",
                        name: "minimumReservePercentage",
                        type: "uint256"
                    },
                    {
                        internalType: "address",
                        name: "yieldVault",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "yieldRecipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "lxlyBridge",
                        type: "address"
                    },
                    {
                        internalType: "uint256",
                        name: "minimumYieldVaultDeposit",
                        type: "uint256"
                    },
                    {
                        internalType: "address",
                        name: "migrationManager",
                        type: "address"
                    },
                    {
                        internalType: "uint256",
                        name: "yieldVaultMaximumSlippagePercentage",
                        type: "uint256"
                    },
                    {
                        internalType: "address",
                        name: "vaultBridgeTokenPart2",
                        type: "address"
                    }
                ],
                internalType: "struct VaultBridgeToken.InitializationParameters",
                name: "initParams",
                type: "tuple"
            }
        ],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "lxlyBridge",
        outputs: [
            {
                internalType: "contract ILxLyBridge",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "lxlyId",
        outputs: [
            {
                internalType: "uint32",
                name: "",
                type: "uint32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        name: "maxDeposit",
        outputs: [
            {
                internalType: "uint256",
                name: "maxAssets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        name: "maxMint",
        outputs: [
            {
                internalType: "uint256",
                name: "maxShares",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "maxRedeem",
        outputs: [
            {
                internalType: "uint256",
                name: "maxShares",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "maxWithdraw",
        outputs: [
            {
                internalType: "uint256",
                name: "maxAssets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "migrationFeesFund",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "migrationManager",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "minimumReservePercentage",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "minimumYieldVaultDeposit",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "mint",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            }
        ],
        name: "mintWithGasToken",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "name",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "nonces",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "paused",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "performReversibleYieldVaultDeposit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            },
            {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            },
            {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            },
            {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }
        ],
        name: "permit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "previewDeposit",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "previewMint",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        name: "previewRedeem",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        name: "previewWithdraw",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "redeem",
        outputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "callerConfirmation",
                type: "address"
            }
        ],
        name: "renounceRole",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "reservePercentage",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "reservedAssets",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "role",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "revokeRole",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "stakedAssets",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "interfaceId",
                type: "bytes4"
            }
        ],
        name: "supportsInterface",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "symbol",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "totalAssets",
        outputs: [
            {
                internalType: "uint256",
                name: "totalManagedAssets",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "underlyingToken",
        outputs: [
            {
                internalType: "contract IERC20",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "assets",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "withdraw",
        outputs: [
            {
                internalType: "uint256",
                name: "shares",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "yield",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "yieldRecipient",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "yieldVault",
        outputs: [
            {
                internalType: "contract IERC4626",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "yieldVaultMaximumSlippagePercentage",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];


/***/ }),

/***/ "./src/abis/testnet/PolygonZkEVM.ts":
/*!******************************************!*\
  !*** ./src/abis/testnet/PolygonZkEVM.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "contract IPolygonZkEVMGlobalExitRootV2", "name": "_globalExitRootManager", "type": "address" }, { "internalType": "contract IERC20Upgradeable", "name": "_pol", "type": "address" }, { "internalType": "contract IPolygonZkEVMBridge", "name": "_bridgeAddress", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [], "name": "AccessControlOnlyCanRenounceRolesForSelf", "type": "error" }, { "inputs": [], "name": "AddressDoNotHaveRequiredRole", "type": "error" }, { "inputs": [], "name": "AllzkEVMSequencedBatchesMustBeVerified", "type": "error" }, { "inputs": [], "name": "BatchFeeOutOfRange", "type": "error" }, { "inputs": [], "name": "ChainIDAlreadyExist", "type": "error" }, { "inputs": [], "name": "ExceedMaxVerifyBatches", "type": "error" }, { "inputs": [], "name": "FinalNumBatchBelowLastVerifiedBatch", "type": "error" }, { "inputs": [], "name": "FinalNumBatchDoesNotMatchPendingState", "type": "error" }, { "inputs": [], "name": "FinalPendingStateNumInvalid", "type": "error" }, { "inputs": [], "name": "HaltTimeoutNotExpired", "type": "error" }, { "inputs": [], "name": "InitBatchMustMatchCurrentForkID", "type": "error" }, { "inputs": [], "name": "InitNumBatchAboveLastVerifiedBatch", "type": "error" }, { "inputs": [], "name": "InitNumBatchDoesNotMatchPendingState", "type": "error" }, { "inputs": [], "name": "InvalidProof", "type": "error" }, { "inputs": [], "name": "InvalidRangeBatchTimeTarget", "type": "error" }, { "inputs": [], "name": "InvalidRangeMultiplierBatchFee", "type": "error" }, { "inputs": [], "name": "MustSequenceSomeBatch", "type": "error" }, { "inputs": [], "name": "NewAccInputHashDoesNotExist", "type": "error" }, { "inputs": [], "name": "NewPendingStateTimeoutMustBeLower", "type": "error" }, { "inputs": [], "name": "NewStateRootNotInsidePrime", "type": "error" }, { "inputs": [], "name": "NewTrustedAggregatorTimeoutMustBeLower", "type": "error" }, { "inputs": [], "name": "OldAccInputHashDoesNotExist", "type": "error" }, { "inputs": [], "name": "OldStateRootDoesNotExist", "type": "error" }, { "inputs": [], "name": "OnlyEmergencyState", "type": "error" }, { "inputs": [], "name": "OnlyNotEmergencyState", "type": "error" }, { "inputs": [], "name": "PendingStateDoesNotExist", "type": "error" }, { "inputs": [], "name": "PendingStateInvalid", "type": "error" }, { "inputs": [], "name": "PendingStateNotConsolidable", "type": "error" }, { "inputs": [], "name": "RollupAddressAlreadyExist", "type": "error" }, { "inputs": [], "name": "RollupMustExist", "type": "error" }, { "inputs": [], "name": "RollupTypeDoesNotExist", "type": "error" }, { "inputs": [], "name": "RollupTypeObsolete", "type": "error" }, { "inputs": [], "name": "SenderMustBeRollup", "type": "error" }, { "inputs": [], "name": "StoredRootMustBeDifferentThanNewRoot", "type": "error" }, { "inputs": [], "name": "TrustedAggregatorTimeoutNotExpired", "type": "error" }, { "inputs": [], "name": "UpdateNotCompatible", "type": "error" }, { "inputs": [], "name": "UpdateToSameRollupTypeID", "type": "error" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "indexed": false, "internalType": "address", "name": "rollupAddress", "type": "address" }, { "indexed": false, "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "indexed": false, "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }, { "indexed": false, "internalType": "uint64", "name": "lastVerifiedBatchBeforeUpgrade", "type": "uint64" }], "name": "AddExistingRollup", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "consensusImplementation", "type": "address" }, { "indexed": false, "internalType": "address", "name": "verifier", "type": "address" }, { "indexed": false, "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "indexed": false, "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }, { "indexed": false, "internalType": "bytes32", "name": "genesis", "type": "bytes32" }, { "indexed": false, "internalType": "string", "name": "description", "type": "string" }], "name": "AddNewRollupType", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "numBatch", "type": "uint64" }, { "indexed": false, "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "indexed": false, "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }], "name": "ConsolidatePendingState", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "rollupAddress", "type": "address" }, { "indexed": false, "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "indexed": false, "internalType": "address", "name": "gasTokenAddress", "type": "address" }], "name": "CreateNewRollup", "type": "event" }, { "anonymous": false, "inputs": [], "name": "EmergencyStateActivated", "type": "event" }, { "anonymous": false, "inputs": [], "name": "EmergencyStateDeactivated", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint8", "name": "version", "type": "uint8" }], "name": "Initialized", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }], "name": "ObsoleteRollupType", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "lastBatchSequenced", "type": "uint64" }], "name": "OnSequenceBatches", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "numBatch", "type": "uint64" }, { "indexed": false, "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "indexed": false, "internalType": "address", "name": "aggregator", "type": "address" }], "name": "OverridePendingState", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "storedStateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "provedStateRoot", "type": "bytes32" }], "name": "ProveNonDeterministicPendingState", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }], "name": "RoleAdminChanged", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleGranted", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleRevoked", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "newBatchFee", "type": "uint256" }], "name": "SetBatchFee", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint16", "name": "newMultiplierBatchFee", "type": "uint16" }], "name": "SetMultiplierBatchFee", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint64", "name": "newPendingStateTimeout", "type": "uint64" }], "name": "SetPendingStateTimeout", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newTrustedAggregator", "type": "address" }], "name": "SetTrustedAggregator", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint64", "name": "newTrustedAggregatorTimeout", "type": "uint64" }], "name": "SetTrustedAggregatorTimeout", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint64", "name": "newVerifyBatchTimeTarget", "type": "uint64" }], "name": "SetVerifyBatchTimeTarget", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint32", "name": "newRollupTypeID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "lastVerifiedBatchBeforeUpgrade", "type": "uint64" }], "name": "UpdateRollup", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "numBatch", "type": "uint64" }, { "indexed": false, "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "aggregator", "type": "address" }], "name": "VerifyBatches", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "indexed": false, "internalType": "uint64", "name": "numBatch", "type": "uint64" }, { "indexed": false, "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "aggregator", "type": "address" }], "name": "VerifyBatchesTrustedAggregator", "type": "event" }, { "inputs": [], "name": "DEFAULT_ADMIN_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "activateEmergencyState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "contract IPolygonRollupBase", "name": "rollupAddress", "type": "address" }, { "internalType": "contract IVerifierRollup", "name": "verifier", "type": "address" }, { "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "internalType": "bytes32", "name": "genesis", "type": "bytes32" }, { "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }], "name": "addExistingRollup", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "consensusImplementation", "type": "address" }, { "internalType": "contract IVerifierRollup", "name": "verifier", "type": "address" }, { "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }, { "internalType": "bytes32", "name": "genesis", "type": "bytes32" }, { "internalType": "string", "name": "description", "type": "string" }], "name": "addNewRollupType", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "bridgeAddress", "outputs": [{ "internalType": "contract IPolygonZkEVMBridge", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "calculateRewardPerBatch", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "chainID", "type": "uint64" }], "name": "chainIDToRollupID", "outputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }], "name": "consolidatePendingState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }, { "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "internalType": "address", "name": "admin", "type": "address" }, { "internalType": "address", "name": "sequencer", "type": "address" }, { "internalType": "address", "name": "gasTokenAddress", "type": "address" }, { "internalType": "string", "name": "sequencerURL", "type": "string" }, { "internalType": "string", "name": "networkName", "type": "string" }], "name": "createNewRollup", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "deactivateEmergencyState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "getBatchFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "getForcedBatchFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "oldStateRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }], "name": "getInputSnarkBytes", "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }], "name": "getLastVerifiedBatch", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }], "name": "getRoleAdmin", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "batchNum", "type": "uint64" }], "name": "getRollupBatchNumToStateRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "getRollupExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "batchNum", "type": "uint64" }], "name": "getRollupPendingStateTransitions", "outputs": [{ "components": [{ "internalType": "uint64", "name": "timestamp", "type": "uint64" }, { "internalType": "uint64", "name": "lastVerifiedBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "exitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "stateRoot", "type": "bytes32" }], "internalType": "struct LegacyZKEVMStateVariables.PendingState", "name": "", "type": "tuple" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "batchNum", "type": "uint64" }], "name": "getRollupSequencedBatches", "outputs": [{ "components": [{ "internalType": "bytes32", "name": "accInputHash", "type": "bytes32" }, { "internalType": "uint64", "name": "sequencedTimestamp", "type": "uint64" }, { "internalType": "uint64", "name": "previousLastBatchSequenced", "type": "uint64" }], "internalType": "struct LegacyZKEVMStateVariables.SequencedBatchData", "name": "", "type": "tuple" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "globalExitRootManager", "outputs": [{ "internalType": "contract IPolygonZkEVMGlobalExitRootV2", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "grantRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "hasRole", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "trustedAggregator", "type": "address" }, { "internalType": "uint64", "name": "_pendingStateTimeout", "type": "uint64" }, { "internalType": "uint64", "name": "_trustedAggregatorTimeout", "type": "uint64" }, { "internalType": "address", "name": "admin", "type": "address" }, { "internalType": "address", "name": "timelock", "type": "address" }, { "internalType": "address", "name": "emergencyCouncil", "type": "address" }, { "internalType": "contract PolygonZkEVMExistentEtrog", "name": "polygonZkEVM", "type": "address" }, { "internalType": "contract IVerifierRollup", "name": "zkEVMVerifier", "type": "address" }, { "internalType": "uint64", "name": "zkEVMForkID", "type": "uint64" }, { "internalType": "uint64", "name": "zkEVMChainID", "type": "uint64" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "isEmergencyState", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }], "name": "isPendingStateConsolidable", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastAggregationTimestamp", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastDeactivatedEmergencyStateTimestamp", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "multiplierBatchFee", "outputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }], "name": "obsoleteRollupType", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "newSequencedBatches", "type": "uint64" }, { "internalType": "bytes32", "name": "newAccInputHash", "type": "bytes32" }], "name": "onSequenceBatches", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "initPendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "finalPendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }, { "internalType": "bytes32[24]", "name": "proof", "type": "bytes32[24]" }], "name": "overridePendingState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "pendingStateTimeout", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "pol", "outputs": [{ "internalType": "contract IERC20Upgradeable", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "initPendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "finalPendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }, { "internalType": "bytes32[24]", "name": "proof", "type": "bytes32[24]" }], "name": "proveNonDeterministicPendingState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "renounceRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "revokeRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "rollupAddress", "type": "address" }], "name": "rollupAddressToID", "outputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "rollupCount", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }], "name": "rollupIDToRollupData", "outputs": [{ "internalType": "contract IPolygonRollupBase", "name": "rollupContract", "type": "address" }, { "internalType": "uint64", "name": "chainID", "type": "uint64" }, { "internalType": "contract IVerifierRollup", "name": "verifier", "type": "address" }, { "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "internalType": "bytes32", "name": "lastLocalExitRoot", "type": "bytes32" }, { "internalType": "uint64", "name": "lastBatchSequenced", "type": "uint64" }, { "internalType": "uint64", "name": "lastVerifiedBatch", "type": "uint64" }, { "internalType": "uint64", "name": "lastPendingState", "type": "uint64" }, { "internalType": "uint64", "name": "lastPendingStateConsolidated", "type": "uint64" }, { "internalType": "uint64", "name": "lastVerifiedBatchBeforeUpgrade", "type": "uint64" }, { "internalType": "uint64", "name": "rollupTypeID", "type": "uint64" }, { "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "rollupTypeCount", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupTypeID", "type": "uint32" }], "name": "rollupTypeMap", "outputs": [{ "internalType": "address", "name": "consensusImplementation", "type": "address" }, { "internalType": "contract IVerifierRollup", "name": "verifier", "type": "address" }, { "internalType": "uint64", "name": "forkID", "type": "uint64" }, { "internalType": "uint8", "name": "rollupCompatibilityID", "type": "uint8" }, { "internalType": "bool", "name": "obsolete", "type": "bool" }, { "internalType": "bytes32", "name": "genesis", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "newBatchFee", "type": "uint256" }], "name": "setBatchFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint16", "name": "newMultiplierBatchFee", "type": "uint16" }], "name": "setMultiplierBatchFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "newPendingStateTimeout", "type": "uint64" }], "name": "setPendingStateTimeout", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "newTrustedAggregatorTimeout", "type": "uint64" }], "name": "setTrustedAggregatorTimeout", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint64", "name": "newVerifyBatchTimeTarget", "type": "uint64" }], "name": "setVerifyBatchTimeTarget", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "totalSequencedBatches", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "totalVerifiedBatches", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "trustedAggregatorTimeout", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "contract ITransparentUpgradeableProxy", "name": "rollupContract", "type": "address" }, { "internalType": "uint32", "name": "newRollupTypeID", "type": "uint32" }, { "internalType": "bytes", "name": "upgradeData", "type": "bytes" }], "name": "updateRollup", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "verifyBatchTimeTarget", "outputs": [{ "internalType": "uint64", "name": "", "type": "uint64" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }, { "internalType": "address", "name": "beneficiary", "type": "address" }, { "internalType": "bytes32[24]", "name": "proof", "type": "bytes32[24]" }], "name": "verifyBatches", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "rollupID", "type": "uint32" }, { "internalType": "uint64", "name": "pendingStateNum", "type": "uint64" }, { "internalType": "uint64", "name": "initNumBatch", "type": "uint64" }, { "internalType": "uint64", "name": "finalNewBatch", "type": "uint64" }, { "internalType": "bytes32", "name": "newLocalExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "newStateRoot", "type": "bytes32" }, { "internalType": "address", "name": "beneficiary", "type": "address" }, { "internalType": "bytes32[24]", "name": "proof", "type": "bytes32[24]" }], "name": "verifyBatchesTrustedAggregator", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/testnet/PolygonZkEVMBridge.ts":
/*!************************************************!*\
  !*** ./src/abis/testnet/PolygonZkEVMBridge.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [], "name": "AlreadyClaimed", "type": "error" }, { "inputs": [], "name": "AmountDoesNotMatchMsgValue", "type": "error" }, { "inputs": [], "name": "DestinationNetworkInvalid", "type": "error" }, { "inputs": [], "name": "EtherTransferFailed", "type": "error" }, { "inputs": [], "name": "FailedTokenWrappedDeployment", "type": "error" }, { "inputs": [], "name": "GasTokenNetworkMustBeZeroOnEther", "type": "error" }, { "inputs": [], "name": "GlobalExitRootInvalid", "type": "error" }, { "inputs": [], "name": "InvalidSmtProof", "type": "error" }, { "inputs": [], "name": "MerkleTreeFull", "type": "error" }, { "inputs": [], "name": "MessageFailed", "type": "error" }, { "inputs": [], "name": "MsgValueNotZero", "type": "error" }, { "inputs": [], "name": "NativeTokenIsEther", "type": "error" }, { "inputs": [], "name": "NoValueInMessagesOnGasTokenNetworks", "type": "error" }, { "inputs": [], "name": "NotValidAmount", "type": "error" }, { "inputs": [], "name": "NotValidOwner", "type": "error" }, { "inputs": [], "name": "NotValidSignature", "type": "error" }, { "inputs": [], "name": "NotValidSpender", "type": "error" }, { "inputs": [], "name": "OnlyEmergencyState", "type": "error" }, { "inputs": [], "name": "OnlyNotEmergencyState", "type": "error" }, { "inputs": [], "name": "OnlyRollupManager", "type": "error" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint8", "name": "leafType", "type": "uint8" }, { "indexed": false, "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "originAddress", "type": "address" }, { "indexed": false, "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "destinationAddress", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "bytes", "name": "metadata", "type": "bytes" }, { "indexed": false, "internalType": "uint32", "name": "depositCount", "type": "uint32" }], "name": "BridgeEvent", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "globalIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "originAddress", "type": "address" }, { "indexed": false, "internalType": "address", "name": "destinationAddress", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "ClaimEvent", "type": "event" }, { "anonymous": false, "inputs": [], "name": "EmergencyStateActivated", "type": "event" }, { "anonymous": false, "inputs": [], "name": "EmergencyStateDeactivated", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint8", "name": "version", "type": "uint8" }], "name": "Initialized", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "indexed": false, "internalType": "address", "name": "originTokenAddress", "type": "address" }, { "indexed": false, "internalType": "address", "name": "wrappedTokenAddress", "type": "address" }, { "indexed": false, "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "NewWrappedToken", "type": "event" }, { "inputs": [], "name": "BASE_INIT_BYTECODE_WRAPPED_TOKEN", "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "WETHToken", "outputs": [{ "internalType": "contract TokenWrapped", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "activateEmergencyState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "address", "name": "token", "type": "address" }, { "internalType": "bool", "name": "forceUpdateGlobalExitRoot", "type": "bool" }, { "internalType": "bytes", "name": "permitData", "type": "bytes" }], "name": "bridgeAsset", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "bool", "name": "forceUpdateGlobalExitRoot", "type": "bool" }, { "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "bridgeMessage", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amountWETH", "type": "uint256" }, { "internalType": "bool", "name": "forceUpdateGlobalExitRoot", "type": "bool" }, { "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "bridgeMessageWETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "leafHash", "type": "bytes32" }, { "internalType": "bytes32[32]", "name": "smtProof", "type": "bytes32[32]" }, { "internalType": "uint32", "name": "index", "type": "uint32" }], "name": "calculateRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "pure", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }, { "internalType": "address", "name": "token", "type": "address" }], "name": "calculateTokenWrapperAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32[32]", "name": "smtProofLocalExitRoot", "type": "bytes32[32]" }, { "internalType": "bytes32[32]", "name": "smtProofRollupExitRoot", "type": "bytes32[32]" }, { "internalType": "uint256", "name": "globalIndex", "type": "uint256" }, { "internalType": "bytes32", "name": "mainnetExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "rollupExitRoot", "type": "bytes32" }, { "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "claimAsset", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32[32]", "name": "smtProofLocalExitRoot", "type": "bytes32[32]" }, { "internalType": "bytes32[32]", "name": "smtProofRollupExitRoot", "type": "bytes32[32]" }, { "internalType": "uint256", "name": "globalIndex", "type": "uint256" }, { "internalType": "bytes32", "name": "mainnetExitRoot", "type": "bytes32" }, { "internalType": "bytes32", "name": "rollupExitRoot", "type": "bytes32" }, { "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originAddress", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bytes", "name": "metadata", "type": "bytes" }], "name": "claimMessage", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "claimedBitMap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "deactivateEmergencyState", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "depositCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "gasTokenAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "gasTokenMetadata", "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "gasTokenNetwork", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint8", "name": "leafType", "type": "uint8" }, { "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originAddress", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bytes32", "name": "metadataHash", "type": "bytes32" }], "name": "getLeafValue", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "pure", "type": "function" }, { "inputs": [], "name": "getRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }], "name": "getTokenMetadata", "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }], "name": "getTokenWrappedAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "globalExitRootManager", "outputs": [{ "internalType": "contract IBasePolygonZkEVMGlobalExitRoot", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "_networkID", "type": "uint32" }, { "internalType": "address", "name": "_gasTokenAddress", "type": "address" }, { "internalType": "uint32", "name": "_gasTokenNetwork", "type": "uint32" }, { "internalType": "contract IBasePolygonZkEVMGlobalExitRoot", "name": "_globalExitRootManager", "type": "address" }, { "internalType": "address", "name": "_polygonRollupManager", "type": "address" }, { "internalType": "bytes", "name": "_gasTokenMetadata", "type": "bytes" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "leafIndex", "type": "uint32" }, { "internalType": "uint32", "name": "sourceBridgeNetwork", "type": "uint32" }], "name": "isClaimed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "isEmergencyState", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastUpdatedDepositCount", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "networkID", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "polygonRollupManager", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }, { "internalType": "string", "name": "name", "type": "string" }, { "internalType": "string", "name": "symbol", "type": "string" }, { "internalType": "uint8", "name": "decimals", "type": "uint8" }], "name": "precalculatedWrapperAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "tokenInfoToWrappedToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "updateGlobalExitRoot", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "leafHash", "type": "bytes32" }, { "internalType": "bytes32[32]", "name": "smtProof", "type": "bytes32[32]" }, { "internalType": "uint32", "name": "index", "type": "uint32" }, { "internalType": "bytes32", "name": "root", "type": "bytes32" }], "name": "verifyMerkleProof", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "pure", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "wrappedTokenToTokenInfo", "outputs": [{ "internalType": "uint32", "name": "originNetwork", "type": "uint32" }, { "internalType": "address", "name": "originTokenAddress", "type": "address" }], "stateMutability": "view", "type": "function" }];


/***/ }),

/***/ "./src/abis/testnet/PolygonZkEVMGlobalExitRoot.ts":
/*!********************************************************!*\
  !*** ./src/abis/testnet/PolygonZkEVMGlobalExitRoot.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "address", "name": "_rollupAddress", "type": "address" }, { "internalType": "address", "name": "_bridgeAddress", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [], "name": "OnlyAllowedContracts", "type": "error" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "mainnetExitRoot", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "rollupExitRoot", "type": "bytes32" }], "name": "UpdateGlobalExitRoot", "type": "event" }, { "inputs": [], "name": "bridgeAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "getLastGlobalExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "globalExitRootMap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastMainnetExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastRollupExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "rollupAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "newRoot", "type": "bytes32" }], "name": "updateExitRoot", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/testnet/PolygonZkEVMGlobalExitRootL2.ts":
/*!**********************************************************!*\
  !*** ./src/abis/testnet/PolygonZkEVMGlobalExitRootL2.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "address", "name": "_bridgeAddress", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [], "name": "OnlyAllowedContracts", "type": "error" }, { "inputs": [], "name": "bridgeAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "globalExitRootMap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "lastRollupExitRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "bytes32", "name": "newRoot", "type": "bytes32" }], "name": "updateExitRoot", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/testnet/ZkEVMBridgeAdapter.ts":
/*!************************************************!*\
  !*** ./src/abis/testnet/ZkEVMBridgeAdapter.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bool", "name": "forceUpdateGlobalExitRoot", "type": "bool" }], "name": "bridgeToken", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];


/***/ }),

/***/ "./src/abis/testnet/ZkEVMWrapper.ts":
/*!******************************************!*\
  !*** ./src/abis/testnet/ZkEVMWrapper.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = [{ "inputs": [{ "internalType": "contract IZkEVMBridge", "name": "zkEVMBridge_", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "inputs": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "deposit", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "deposit", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "contract IDai", "name": "token", "type": "address" }, { "internalType": "uint32", "name": "destinationNetwork", "type": "uint32" }, { "internalType": "address", "name": "destinationAddress", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "nonce", "type": "uint256" }, { "internalType": "uint256", "name": "expiry", "type": "uint256" }, { "internalType": "bool", "name": "allowed", "type": "bool" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "deposit", "outputs": [], "stateMutability": "payable", "type": "function" }];


/***/ }),

/***/ "./src/abis/testnet/index.ts":
/*!***********************************!*\
  !*** ./src/abis/testnet/index.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var BridgeExtension_1 = __importDefault(__webpack_require__(/*! ./BridgeExtension */ "./src/abis/testnet/BridgeExtension.ts"));
var ERC20_1 = __importDefault(__webpack_require__(/*! ./ERC20 */ "./src/abis/testnet/ERC20.ts"));
var PolygonZkEVM_1 = __importDefault(__webpack_require__(/*! ./PolygonZkEVM */ "./src/abis/testnet/PolygonZkEVM.ts"));
var PolygonZkEVMBridge_1 = __importDefault(__webpack_require__(/*! ./PolygonZkEVMBridge */ "./src/abis/testnet/PolygonZkEVMBridge.ts"));
var PolygonZkEVMGlobalExitRoot_1 = __importDefault(__webpack_require__(/*! ./PolygonZkEVMGlobalExitRoot */ "./src/abis/testnet/PolygonZkEVMGlobalExitRoot.ts"));
var PolygonZkEVMGlobalExitRootL2_1 = __importDefault(__webpack_require__(/*! ./PolygonZkEVMGlobalExitRootL2 */ "./src/abis/testnet/PolygonZkEVMGlobalExitRootL2.ts"));
var ZkEVMBridgeAdapter_1 = __importDefault(__webpack_require__(/*! ./ZkEVMBridgeAdapter */ "./src/abis/testnet/ZkEVMBridgeAdapter.ts"));
var ZkEVMWrapper_1 = __importDefault(__webpack_require__(/*! ./ZkEVMWrapper */ "./src/abis/testnet/ZkEVMWrapper.ts"));
var GasPorter_1 = __importDefault(__webpack_require__(/*! ./GasPorter */ "./src/abis/testnet/GasPorter.ts"));
var GenericVaultBridgeToken_1 = __importDefault(__webpack_require__(/*! ./GenericVaultBridgeToken */ "./src/abis/testnet/GenericVaultBridgeToken.ts"));
exports["default"] = {
    GasPorter: GasPorter_1.default,
    ERC20: ERC20_1.default,
    PolygonZkEVM: PolygonZkEVM_1.default,
    PolygonZkEVMBridge: PolygonZkEVMBridge_1.default,
    PolygonZkEVMGlobalExitRoot: PolygonZkEVMGlobalExitRoot_1.default,
    PolygonZkEVMGlobalExitRootL2: PolygonZkEVMGlobalExitRootL2_1.default,
    ZkEVMBridgeAdapter: ZkEVMBridgeAdapter_1.default,
    ZkEVMWrapper: ZkEVMWrapper_1.default,
    BridgeExtension: BridgeExtension_1.default,
    GenericVaultBridgeToken: GenericVaultBridgeToken_1.default
};


/***/ }),

/***/ "./src/abstracts/base_big_number.ts":
/*!******************************************!*\
  !*** ./src/abstracts/base_big_number.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseBigNumber = void 0;
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var BaseBigNumber = /** @class */ (function () {
    function BaseBigNumber() {
    }
    BaseBigNumber.isBN = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    return BaseBigNumber;
}());
exports.BaseBigNumber = BaseBigNumber;


/***/ }),

/***/ "./src/abstracts/base_contract.ts":
/*!****************************************!*\
  !*** ./src/abstracts/base_contract.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseContract = void 0;
var BaseContract = /** @class */ (function () {
    function BaseContract(address, logger) {
        this.address = address;
        this.logger = logger;
    }
    return BaseContract;
}());
exports.BaseContract = BaseContract;


/***/ }),

/***/ "./src/abstracts/base_web3_client.ts":
/*!*******************************************!*\
  !*** ./src/abstracts/base_web3_client.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseWeb3Client = void 0;
var BaseWeb3Client = /** @class */ (function () {
    function BaseWeb3Client(logger) {
        this.logger = logger;
    }
    BaseWeb3Client.prototype.getRootHash = function (startBlock, endBlock) {
        return this.sendRPCRequest({
            jsonrpc: '2.0',
            method: 'eth_getRootHash',
            params: [Number(startBlock), Number(endBlock)],
            id: new Date().getTime()
        }).then(function (payload) {
            return String(payload.result);
        });
    };
    BaseWeb3Client.prototype.getAccountsUsingRPC_ = function () {
        return this.sendRPCRequest({
            jsonrpc: '2.0',
            method: 'eth_accounts',
            params: [],
            id: new Date().getTime()
        }).then(function (payload) {
            return payload.result;
        });
    };
    return BaseWeb3Client;
}());
exports.BaseWeb3Client = BaseWeb3Client;


/***/ }),

/***/ "./src/abstracts/contract_method.ts":
/*!******************************************!*\
  !*** ./src/abstracts/contract_method.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseContractMethod = void 0;
var BaseContractMethod = /** @class */ (function () {
    function BaseContractMethod(logger) {
        this.logger = logger;
    }
    return BaseContractMethod;
}());
exports.BaseContractMethod = BaseContractMethod;


/***/ }),

/***/ "./src/abstracts/index.ts":
/*!********************************!*\
  !*** ./src/abstracts/index.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./contract_method */ "./src/abstracts/contract_method.ts"), exports);
__exportStar(__webpack_require__(/*! ./base_web3_client */ "./src/abstracts/base_web3_client.ts"), exports);
__exportStar(__webpack_require__(/*! ./base_contract */ "./src/abstracts/base_contract.ts"), exports);
__exportStar(__webpack_require__(/*! ./base_big_number */ "./src/abstracts/base_big_number.ts"), exports);


/***/ }),

/***/ "./src/config.ts":
/*!***********************!*\
  !*** ./src/config.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.config = void 0;
exports.config = {
    BridgeService: {
        testnet: 'https://api-gateway.polygon.technology/api/v3/proof/testnet/',
        mainnet: 'https://api-gateway.polygon.technology/api/v3/proof/mainnet/'
    }
};


/***/ }),

/***/ "./src/constant.ts":
/*!*************************!*\
  !*** ./src/constant.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Permit = exports._GLOBAL_INDEX_MAINNET_FLAG = exports.UNISWAP_DOMAIN_TYPEHASH = exports.EIP_2612_DOMAIN_TYPEHASH = exports.EIP_2612_PERMIT_TYPEHASH = exports.DAI_PERMIT_TYPEHASH = exports.ADDRESS_ZERO = exports.MAX_AMOUNT = void 0;
exports.MAX_AMOUNT = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';
exports.ADDRESS_ZERO = '0x0000000000000000000000000000000000000000';
exports.DAI_PERMIT_TYPEHASH = "0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb";
exports.EIP_2612_PERMIT_TYPEHASH = "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9";
exports.EIP_2612_DOMAIN_TYPEHASH = "0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f";
exports.UNISWAP_DOMAIN_TYPEHASH = "0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866";
exports._GLOBAL_INDEX_MAINNET_FLAG = BigInt(Math.pow(2, 64));
var Permit;
(function (Permit) {
    Permit["DAI"] = "DAI";
    Permit["EIP_2612"] = "EIP_2612";
    Permit["UNISWAP"] = "UNISWAP";
})(Permit = exports.Permit || (exports.Permit = {}));


/***/ }),

/***/ "./src/default.ts":
/*!************************!*\
  !*** ./src/default.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultExport = void 0;
var lxly_1 = __webpack_require__(/*! ./lxly */ "./src/lxly/index.ts");
var utils_1 = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");
exports.defaultExport = {
    utils: utils_1.utils,
    use: utils_1.use,
    LxLyClient: lxly_1.LxLyClient,
};


/***/ }),

/***/ "./src/enums/error_type.ts":
/*!*********************************!*\
  !*** ./src/enums/error_type.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ERROR_TYPE = void 0;
var ERROR_TYPE;
(function (ERROR_TYPE) {
    ERROR_TYPE["AllowedOnEthereum"] = "allowed_on_ethereum";
    ERROR_TYPE["Unknown"] = "unknown";
    ERROR_TYPE["ProofAPINotSet"] = "proof_api_not_set";
    ERROR_TYPE["TransactionOptionNotObject"] = "transation_object_not_object";
    ERROR_TYPE["BurnTxNotCheckPointed"] = "burn_tx_not_checkpointed";
    ERROR_TYPE["EIP1559NotSupported"] = "eip-1559_not_supported";
    ERROR_TYPE["NullSpenderAddress"] = "null_spender_address";
    ERROR_TYPE["AllowedOnNonNativeTokens"] = "allowed_on_non_native_token";
    ERROR_TYPE["AllowedOnMainnet"] = "allowed_on_mainnet";
    ERROR_TYPE["BridgeAdapterNotFound"] = "bridge_adapter_address_not_passed";
})(ERROR_TYPE = exports.ERROR_TYPE || (exports.ERROR_TYPE = {}));


/***/ }),

/***/ "./src/enums/index.ts":
/*!****************************!*\
  !*** ./src/enums/index.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./log_event_signature */ "./src/enums/log_event_signature.ts"), exports);
__exportStar(__webpack_require__(/*! ./error_type */ "./src/enums/error_type.ts"), exports);


/***/ }),

/***/ "./src/enums/log_event_signature.ts":
/*!******************************************!*\
  !*** ./src/enums/log_event_signature.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Log_Event_Signature = void 0;
var Log_Event_Signature;
(function (Log_Event_Signature) {
    // PlasmaErc20WithdrawEventSig = '0xebff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f',
    // PlasmaErc721WithdrawEventSig = '0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb',
    Log_Event_Signature["Erc20Transfer"] = "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
    Log_Event_Signature["Erc721Transfer"] = "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
    Log_Event_Signature["Erc1155Transfer"] = "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62";
    Log_Event_Signature["Erc721BatchTransfer"] = "0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df";
    Log_Event_Signature["Erc1155BatchTransfer"] = "0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb";
    Log_Event_Signature["Erc721TransferWithMetadata"] = "0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14";
})(Log_Event_Signature = exports.Log_Event_Signature || (exports.Log_Event_Signature = {}));


/***/ }),

/***/ "./src/implementation/bn.ts":
/*!**********************************!*\
  !*** ./src/implementation/bn.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EmptyBigNumber = void 0;
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var abstracts_1 = __webpack_require__(/*! ../abstracts */ "./src/abstracts/index.ts");
var EmptyBigNumber = /** @class */ (function (_super) {
    __extends(EmptyBigNumber, _super);
    function EmptyBigNumber(value) {
        return _super.call(this) || this;
    }
    EmptyBigNumber.prototype.toString = function (base) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.toNumber = function () {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.toBuffer = function (base) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.add = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.sub = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.mul = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.div = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.lte = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.lt = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.gte = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.gt = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    EmptyBigNumber.prototype.eq = function (value) {
        return (0, __1.throwNotImplemented)();
    };
    return EmptyBigNumber;
}(abstracts_1.BaseBigNumber));
exports.EmptyBigNumber = EmptyBigNumber;


/***/ }),

/***/ "./src/implementation/index.ts":
/*!*************************************!*\
  !*** ./src/implementation/index.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./bn */ "./src/implementation/bn.ts"), exports);


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var default_1 = __webpack_require__(/*! ./default */ "./src/default.ts");
__exportStar(__webpack_require__(/*! ./utils */ "./src/utils/index.ts"), exports);
__exportStar(__webpack_require__(/*! ./enums */ "./src/enums/index.ts"), exports);
__exportStar(__webpack_require__(/*! ./interfaces */ "./src/interfaces/index.ts"), exports);
__exportStar(__webpack_require__(/*! ./types */ "./src/types/index.ts"), exports);
__exportStar(__webpack_require__(/*! ./constant */ "./src/constant.ts"), exports);
__exportStar(__webpack_require__(/*! ./abstracts */ "./src/abstracts/index.ts"), exports);
__exportStar(__webpack_require__(/*! ./services */ "./src/services/index.ts"), exports);
__exportStar(__webpack_require__(/*! ./abis */ "./src/abis/index.ts"), exports);
__exportStar(__webpack_require__(/*! ./lxly */ "./src/lxly/index.ts"), exports);
exports["default"] = default_1.defaultExport;


/***/ }),

/***/ "./src/interfaces/allowance_transaction_option.ts":
/*!********************************************************!*\
  !*** ./src/interfaces/allowance_transaction_option.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/approve_transaction_option.ts":
/*!******************************************************!*\
  !*** ./src/interfaces/approve_transaction_option.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/base_client_config.ts":
/*!**********************************************!*\
  !*** ./src/interfaces/base_client_config.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/block.ts":
/*!*********************************!*\
  !*** ./src/interfaces/block.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/block_with_transaction.ts":
/*!**************************************************!*\
  !*** ./src/interfaces/block_with_transaction.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/bridge.ts":
/*!**********************************!*\
  !*** ./src/interfaces/bridge.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/bridge_extension.ts":
/*!********************************************!*\
  !*** ./src/interfaces/bridge_extension.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/bridge_transaction_option.ts":
/*!*****************************************************!*\
  !*** ./src/interfaces/bridge_transaction_option.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/contract_init_param.ts":
/*!***********************************************!*\
  !*** ./src/interfaces/contract_init_param.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/contracts.ts":
/*!*************************************!*\
  !*** ./src/interfaces/contracts.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/error.ts":
/*!*********************************!*\
  !*** ./src/interfaces/error.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/gas_porter.ts":
/*!**************************************!*\
  !*** ./src/interfaces/gas_porter.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GassetSource = exports.GassetType = void 0;
var GassetType;
(function (GassetType) {
    GassetType[GassetType["NATIVE_TOKEN"] = 0] = "NATIVE_TOKEN";
    GassetType[GassetType["ERC20_TOKEN"] = 1] = "ERC20_TOKEN";
    GassetType[GassetType["SETTLEMENT_TOKEN"] = 2] = "SETTLEMENT_TOKEN";
})(GassetType = exports.GassetType || (exports.GassetType = {}));
var GassetSource;
(function (GassetSource) {
    GassetSource[GassetSource["MSG_VALUE"] = 0] = "MSG_VALUE";
    GassetSource[GassetSource["ERC20_ALLOWANCE"] = 1] = "ERC20_ALLOWANCE";
    GassetSource[GassetSource["DEX_SWAP"] = 2] = "DEX_SWAP";
})(GassetSource = exports.GassetSource || (exports.GassetSource = {}));


/***/ }),

/***/ "./src/interfaces/gas_porters.ts":
/*!***************************************!*\
  !*** ./src/interfaces/gas_porters.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/index.ts":
/*!*********************************!*\
  !*** ./src/interfaces/index.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./plugin */ "./src/interfaces/plugin.ts"), exports);
__exportStar(__webpack_require__(/*! ./method */ "./src/interfaces/method.ts"), exports);
__exportStar(__webpack_require__(/*! ./transaction_config */ "./src/interfaces/transaction_config.ts"), exports);
__exportStar(__webpack_require__(/*! ./transaction_write_result */ "./src/interfaces/transaction_write_result.ts"), exports);
__exportStar(__webpack_require__(/*! ./transaction_result */ "./src/interfaces/transaction_result.ts"), exports);
__exportStar(__webpack_require__(/*! ./transaction_option */ "./src/interfaces/transaction_option.ts"), exports);
__exportStar(__webpack_require__(/*! ./contract_init_param */ "./src/interfaces/contract_init_param.ts"), exports);
__exportStar(__webpack_require__(/*! ./tx_receipt */ "./src/interfaces/tx_receipt.ts"), exports);
__exportStar(__webpack_require__(/*! ./transaction_data */ "./src/interfaces/transaction_data.ts"), exports);
__exportStar(__webpack_require__(/*! ./block */ "./src/interfaces/block.ts"), exports);
__exportStar(__webpack_require__(/*! ./block_with_transaction */ "./src/interfaces/block_with_transaction.ts"), exports);
__exportStar(__webpack_require__(/*! ./rpc_request_payload */ "./src/interfaces/rpc_request_payload.ts"), exports);
__exportStar(__webpack_require__(/*! ./rpc_response_payload */ "./src/interfaces/rpc_response_payload.ts"), exports);
__exportStar(__webpack_require__(/*! ./map_promise_option */ "./src/interfaces/map_promise_option.ts"), exports);
__exportStar(__webpack_require__(/*! ./base_client_config */ "./src/interfaces/base_client_config.ts"), exports);
__exportStar(__webpack_require__(/*! ./error */ "./src/interfaces/error.ts"), exports);
__exportStar(__webpack_require__(/*! ./allowance_transaction_option */ "./src/interfaces/allowance_transaction_option.ts"), exports);
__exportStar(__webpack_require__(/*! ./approve_transaction_option */ "./src/interfaces/approve_transaction_option.ts"), exports);
__exportStar(__webpack_require__(/*! ./contracts */ "./src/interfaces/contracts.ts"), exports);
__exportStar(__webpack_require__(/*! ./bridge_transaction_option */ "./src/interfaces/bridge_transaction_option.ts"), exports);
__exportStar(__webpack_require__(/*! ./bridge */ "./src/interfaces/bridge.ts"), exports);
__exportStar(__webpack_require__(/*! ./gas_porter */ "./src/interfaces/gas_porter.ts"), exports);
__exportStar(__webpack_require__(/*! ./gas_porters */ "./src/interfaces/gas_porters.ts"), exports);
__exportStar(__webpack_require__(/*! ./wrappers */ "./src/interfaces/wrappers.ts"), exports);
__exportStar(__webpack_require__(/*! ./bridge_extension */ "./src/interfaces/bridge_extension.ts"), exports);


/***/ }),

/***/ "./src/interfaces/map_promise_option.ts":
/*!**********************************************!*\
  !*** ./src/interfaces/map_promise_option.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/method.ts":
/*!**********************************!*\
  !*** ./src/interfaces/method.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/plugin.ts":
/*!**********************************!*\
  !*** ./src/interfaces/plugin.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/rpc_request_payload.ts":
/*!***********************************************!*\
  !*** ./src/interfaces/rpc_request_payload.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/rpc_response_payload.ts":
/*!************************************************!*\
  !*** ./src/interfaces/rpc_response_payload.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/transaction_config.ts":
/*!**********************************************!*\
  !*** ./src/interfaces/transaction_config.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/transaction_data.ts":
/*!********************************************!*\
  !*** ./src/interfaces/transaction_data.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/transaction_option.ts":
/*!**********************************************!*\
  !*** ./src/interfaces/transaction_option.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/transaction_result.ts":
/*!**********************************************!*\
  !*** ./src/interfaces/transaction_result.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/transaction_write_result.ts":
/*!****************************************************!*\
  !*** ./src/interfaces/transaction_write_result.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/tx_receipt.ts":
/*!**************************************!*\
  !*** ./src/interfaces/tx_receipt.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/interfaces/wrappers.ts":
/*!************************************!*\
  !*** ./src/interfaces/wrappers.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/lxly/bridge.ts":
/*!****************************!*\
  !*** ./src/lxly/bridge.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Bridge = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var Bridge = /** @class */ (function (_super) {
    __extends(Bridge, _super);
    function Bridge(client_, address, networkId) {
        return _super.call(this, {
            address: address,
            name: 'PolygonZkEVMBridge',
            networkId: networkId
        }, client_) || this;
    }
    Bridge.prototype.method = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.getContract().then(function (contract) {
            return contract.method.apply(contract, __spreadArray([methodName], args, false));
        });
    };
    /**
     * bridge function to be called on that network from where token is to be transferred to a different network
     *
     * @param {string} token Token address
     * @param {number} destinationNetwork Network at which tokens will be bridged
     * @param {string} destinationAddress Address to which tokens will be bridged
     * @param {TYPE_AMOUNT} amount amount of tokens
     * @param {string} [permitData] Permit data to avoid approve call
     * @param {ITransactionOption} [option]
     *
     * @returns
     * @memberof Bridge
     */
    Bridge.prototype.bridgeAsset = function (destinationNetwork, destinationAddress, amount, token, forceUpdateGlobalExitRoot, permitData, option) {
        var _this = this;
        if (permitData === void 0) { permitData = '0x'; }
        return this.method("bridgeAsset", destinationNetwork, destinationAddress, utils_1.Converter.toHex(amount), token, forceUpdateGlobalExitRoot, permitData).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    /**
     * Claim function to be called on the destination network
     *
     * @param {string[]} smtProof Merkle Proof
     * @param {string[]} smtProofRollup Roll up Merkle Proof
     * @param {string} globalIndex Global Index
     * @param {string} mainnetExitRoot Mainnet Exit Root
     * @param {string} rollupExitRoot RollUP Exit Root
     * @param {number} originNetwork Network at which token was initially deployed
     * @param {string} originTokenAddress Address of token at network where token was initially deployed
     * @param {string} destinationAddress Address to which tokens will be bridged
     * @param {TYPE_AMOUNT} amount amount of tokens
     * @param {string} [metadata] Metadata of token
     * @param {ITransactionOption} [option]
     *
     * @returns
     * @memberof Bridge
     */
    Bridge.prototype.claimAsset = function (smtProof, smtProofRollup, globalIndex, mainnetExitRoot, rollupExitRoot, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata, option) {
        var _this = this;
        return this.method("claimAsset", smtProof, smtProofRollup, globalIndex, mainnetExitRoot, rollupExitRoot, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    /**
     * bridge function to be called on that network from where message is to be transferred to a different network
     * @param {number} destinationNetwork Network at which tokens will be bridged
     * @param {string} destinationAddress Address to which tokens will be bridged
     * @param {boolean} forceUpdateGlobalExitRoot Indicates if the new global exit root is updated or not
     * @param {string} [permitData] Permit data to avoid approve call
     * @param {ITransactionOption} [option]
     *
     * @returns
     * @memberof Bridge
     */
    Bridge.prototype.bridgeMessage = function (destinationNetwork, destinationAddress, forceUpdateGlobalExitRoot, permitData, option) {
        var _this = this;
        if (permitData === void 0) { permitData = '0x'; }
        return this.method("bridgeMessage", destinationNetwork, destinationAddress, forceUpdateGlobalExitRoot, permitData).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    /**
     * Claim Message new function to be called on the destination network
     * If the receiving address is an EOA, the call will result as a success
     * Which means that the amount of ether will be transferred correctly, but the message
     * will not trigger any execution. this will work after Etrog changes
     * @param {string[]} smtProof Merkle Proof
     * @param {string[]} smtProofRollup Roll up Merkle Proof
     * @param {string} globalIndex Global Index
     * @param {string} mainnetExitRoot Mainnet Exit Root
     * @param {string} rollupExitRoot RollUP Exit Root
     * @param {number} originNetwork Network at which token was initially deployed
     * @param {string} originTokenAddress Address of token at network where token was initially deployed
     * @param {string} destinationAddress Address to which tokens will be bridged
     * @param {TYPE_AMOUNT} amount amount of tokens
     * @param {string} [metadata] Metadata of token
     * @param {ITransactionOption} [option]
     *
     * @returns
     * @memberof Bridge
     */
    Bridge.prototype.claimMessage = function (smtProof, smtProofRollup, globalIndex, mainnetExitRoot, rollupExitRoot, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata, option) {
        var _this = this;
        return this.method("claimMessage", smtProof, smtProofRollup, globalIndex, mainnetExitRoot, rollupExitRoot, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    /**
     * get the address of token which is created by the bridge contract on the non origin chain
     *
     * @param {number} originNetwork Network at which the token was initially deployed
     * @param {string} originTokenAddress Address at the network where token was initially deployed
     * @returns
     * @memberof Bridge
     */
    Bridge.prototype.getMappedTokenInfo = function (originNetwork, originTokenAddress) {
        var _this = this;
        return this.method("getTokenWrappedAddress", originNetwork, originTokenAddress).then(function (method) {
            return _this.processRead(method);
        });
    };
    /**
     * Tells if claim has already happed or not based on the deposit index
     *
     * @param {number} index
     * @returns
     * @memberof Bridge
     */
    Bridge.prototype.isClaimed = function (index, sourceBridgeNetwork) {
        var _this = this;
        return this.method("isClaimed", index, sourceBridgeNetwork).then(function (method) {
            return _this.processRead(method);
        });
    };
    /**
     * Even if the wrapped contract is not deployed on the destination chain, it will tell us the address which is going to be.
     *
     * @param {number} originNetwork Network at which the token was initially deployed
     * @param {string} originTokenAddress Address at the network where token was initially deployed
     * @returns
     * @memberof Bridge
     */
    Bridge.prototype.precalculatedMappedTokenInfo = function (originNetwork, originTokenAddress) {
        var _this = this;
        return this.method("precalculatedWrapperAddress", originNetwork, originTokenAddress).then(function (method) {
            return _this.processRead(method);
        });
    };
    /**
     * get the address and network of the wrapped token where it was emerged initially
     *
     * @param {number} wrappedToken
     * @returns
     * @memberof Bridge
     */
    Bridge.prototype.getOriginTokenInfo = function (wrappedToken) {
        var _this = this;
        return this.method("wrappedTokenToTokenInfo", wrappedToken).then(function (method) {
            return _this.processRead(method);
        });
    };
    /**
     * get the network ID for chain in which the bridge contract is deployed
     *
     * @returns
     * @memberof Bridge
     */
    Bridge.prototype.networkID = function () {
        var _this = this;
        if (this.networkID_) {
            return (0, utils_1.promiseResolve)(this.networkID_);
        }
        return this.method("networkID").then(function (method) {
            return _this.processRead(method).then(function (networkId) {
                _this.networkID_ = networkId;
                return networkId;
            });
        });
    };
    return Bridge;
}(utils_1.BaseToken));
exports.Bridge = Bridge;


/***/ }),

/***/ "./src/lxly/bridge_adapter.ts":
/*!************************************!*\
  !*** ./src/lxly/bridge_adapter.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BridgeAdapter = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
/**
 * BridgeAdapter used Bridge to implement additional custom features
 * like bridging custom ERC20
 */
var BridgeAdapter = /** @class */ (function (_super) {
    __extends(BridgeAdapter, _super);
    function BridgeAdapter(client_, address, networkId) {
        return _super.call(this, {
            address: address,
            name: 'ZkEVMBridgeAdapter',
            networkId: networkId,
        }, client_) || this;
    }
    BridgeAdapter.prototype.method = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.getContract().then(function (contract) {
            return contract.method.apply(contract, __spreadArray([methodName], args, false));
        });
    };
    /**
     * uses the bridge function present in the adapter contract
     * @param recipient
     * @param amount
     * @param destinationNetworkId
     * @param forceUpdateGlobalExitRoot
     * @param option
     *
     * @returns
     * @memberof ZkEvmCustomBridge
     */
    BridgeAdapter.prototype.bridgeToken = function (recipient, amount, destinationNetworkId, forceUpdateGlobalExitRoot, option) {
        var _this = this;
        return this.method('bridgeToken', recipient, utils_1.Converter.toHex(amount), forceUpdateGlobalExitRoot).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    return BridgeAdapter;
}(utils_1.BaseToken));
exports.BridgeAdapter = BridgeAdapter;


/***/ }),

/***/ "./src/lxly/bridge_extension.ts":
/*!**************************************!*\
  !*** ./src/lxly/bridge_extension.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BridgeExtension = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var BridgeExtension = /** @class */ (function (_super) {
    __extends(BridgeExtension, _super);
    function BridgeExtension(client_, address, networkId) {
        return _super.call(this, {
            address: address,
            name: 'BridgeExtension',
            networkId: networkId
        }, client_) || this;
    }
    BridgeExtension.prototype.method = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.getContract().then(function (contract) {
            return contract.method.apply(contract, __spreadArray([methodName], args, false));
        });
    };
    BridgeExtension.prototype.isEtherToken = function () {
        return this.contractParam.address === __1.ADDRESS_ZERO;
    };
    /**
     * bridge function to be called on that network from where token is to be transferred to a different network
     *
     * @param {string} token Token address
     * @param {TYPE_AMOUNT} amount amount of tokens
     * @param {number} destinationNetwork Network at which tokens will be bridged
     * @param {string} callAddress Address to which tokens will be bridged
     * @param {string} fallbackAddress Address to which tokens will be bridged if the execution fails.
     * @param {string} callData Encoded function data of the smart contract at target callAddress
     * @param {forceUpdateGlobalExitRoot} boolean boolean to force update global exit root
     * @param {string} permitData Permit data to avoid approve call
     * @param {ITransactionOption} [option]
     *
     * @returns
     * @memberof BridgeExtension
     */
    BridgeExtension.prototype.bridgeAndCall = function (token, amount, destinationNetwork, callAddress, fallbackAddress, calldata, forceUpdateGlobalExitRoot, permitData, option) {
        var _this = this;
        if (this.isEtherToken()) {
            option.value = utils_1.Converter.toHex(amount);
        }
        if (permitData === undefined) {
            return this.method("bridgeAndCall", token, utils_1.Converter.toHex(amount), destinationNetwork, callAddress, fallbackAddress, calldata, forceUpdateGlobalExitRoot).then(function (method) {
                return _this.processWrite(method, option);
            });
        }
        else {
            return this.method("bridgeAndCall", token, utils_1.Converter.toHex(amount), permitData, destinationNetwork, callAddress, fallbackAddress, calldata, forceUpdateGlobalExitRoot).then(function (method) {
                return _this.processWrite(method, option);
            });
        }
    };
    return BridgeExtension;
}(utils_1.BaseToken));
exports.BridgeExtension = BridgeExtension;


/***/ }),

/***/ "./src/lxly/bridge_util.ts":
/*!*********************************!*\
  !*** ./src/lxly/bridge_util.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BridgeUtil = void 0;
var services_1 = __webpack_require__(/*! ../services */ "./src/services/index.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var BridgeUtil = /** @class */ (function () {
    function BridgeUtil(client) {
        this.BRIDGE_TOPIC = "0x501781209a1f8899323b96b4ef08b168df93e0a90c673d1e4cce39366cb62f9b";
        this.client_ = client;
    }
    BridgeUtil.prototype.decodedBridgeData_ = function (data, networkId) {
        var client = this.client_.providers[networkId].provider;
        var abi = this.client_.abiManager.getABI('PolygonZkEVMBridge');
        var types = abi.filter(function (event) { return event.name === "BridgeEvent"; });
        if (!types.length) {
            throw new Error("Data not decoded");
        }
        var decodedData = client.decodeParameters(data, types[0].inputs);
        var leafType = decodedData[0], originNetwork = decodedData[1], originTokenAddress = decodedData[2], destinationNetwork = decodedData[3], destinationAddress = decodedData[4], amount = decodedData[5], metadata = decodedData[6], depositCount = decodedData[7];
        var result = {
            leafType: leafType,
            originNetwork: originNetwork,
            originTokenAddress: originTokenAddress,
            destinationNetwork: destinationNetwork,
            destinationAddress: destinationAddress,
            amount: amount,
            metadata: metadata || '0x',
            depositCount: depositCount,
        };
        return Promise.resolve(result);
    };
    BridgeUtil.prototype.getBridgeLogData_ = function (transactionHash, networkId, bridgeIndex) {
        var _this = this;
        if (bridgeIndex === void 0) { bridgeIndex = 0; }
        var client = this.client_.providers[networkId].provider;
        return client.getTransactionReceipt(transactionHash)
            .then(function (receipt) {
            var logs = receipt.logs.filter(function (log) { return log.topics[0].toLowerCase() === _this.BRIDGE_TOPIC; });
            if (!logs.length) {
                throw new Error("Log not found in receipt");
            }
            var data = logs[bridgeIndex].data;
            return _this.decodedBridgeData_(data, networkId);
        });
    };
    BridgeUtil.prototype.getProof_ = function (networkId, depositCount) {
        return services_1.service.network.getMerkleProof(networkId, depositCount).then(function (proof) {
            return proof;
        }).catch(function (_) {
            throw new Error("Error in creating proof");
        });
    };
    BridgeUtil.prototype.getBridgeLogData = function (transactionHash, networkId, bridgeIndex) {
        if (bridgeIndex === void 0) { bridgeIndex = 0; }
        return this.getBridgeLogData_(transactionHash, networkId, bridgeIndex);
    };
    BridgeUtil.prototype.computeGlobalIndex = function (indexLocal, sourceNetworkId) {
        if (BigInt(sourceNetworkId) === BigInt(0)) {
            return BigInt(indexLocal) + __1._GLOBAL_INDEX_MAINNET_FLAG;
        }
        else {
            return BigInt(indexLocal) + BigInt(sourceNetworkId - 1) * BigInt(Math.pow(2, 32));
        }
    };
    BridgeUtil.prototype.buildPayloadForClaim = function (transactionHash, networkId, bridgeIndex) {
        var _this = this;
        if (bridgeIndex === void 0) { bridgeIndex = 0; }
        return this.getBridgeLogData_(transactionHash, networkId, bridgeIndex).then(function (data) {
            var originNetwork = data.originNetwork, originTokenAddress = data.originTokenAddress, destinationNetwork = data.destinationNetwork, destinationAddress = data.destinationAddress, amount = data.amount, metadata = data.metadata, depositCount = data.depositCount;
            return _this.getProof_(networkId, depositCount).then(function (proof) {
                var payload = {};
                payload.smtProof = proof.merkle_proof;
                payload.smtProofRollup = proof.rollup_merkle_proof;
                payload.globalIndex = _this.computeGlobalIndex(depositCount, networkId).toString();
                payload.mainnetExitRoot = proof.main_exit_root;
                payload.rollupExitRoot = proof.rollup_exit_root;
                payload.originNetwork = originNetwork;
                payload.originTokenAddress = originTokenAddress;
                payload.destinationNetwork = destinationNetwork;
                payload.destinationAddress = destinationAddress;
                payload.amount = amount;
                payload.metadata = metadata;
                return payload;
            });
        });
    };
    return BridgeUtil;
}());
exports.BridgeUtil = BridgeUtil;


/***/ }),

/***/ "./src/lxly/contract.ts":
/*!******************************!*\
  !*** ./src/lxly/contract.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Contract = void 0;
var util_1 = __webpack_require__(/*! @ethereumjs/util */ "@ethereumjs/util");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var Contract = /** @class */ (function (_super) {
    __extends(Contract, _super);
    function Contract(abi, tokenAddress, networkId, client) {
        return _super.call(this, {
            networkId: networkId,
            address: tokenAddress,
            abi: abi,
            name: '',
        }, client) || this;
    }
    /**
     * Read from contract
     *
     * @param {string} method - Method to call
     * @param {any[]} args - method arguments
     * @returns
     * @memberof Contract
     */
    Contract.prototype.read = function (method) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.getContract().then(function (contract) {
            var methodInstance = contract.method.apply(contract, __spreadArray([method], args, false));
            return _this.processRead(methodInstance);
        });
    };
    /**
     * write to contract
     *
     * @param {ITransactionOption} option - options
     * @param {string} method - Method to call
     * @param {any[]} args - method arguments
     * @returns
     * @memberof Contract
     */
    Contract.prototype.write = function (option, method) {
        var _this = this;
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        return this.getContract().then(function (contract) {
            var methodInstance = contract.method.apply(contract, __spreadArray([method], args, false));
            return _this.processWrite(methodInstance, option);
        });
    };
    /**
     * encode abi call
     * @param {string} method - Method to call
     * @param {any[]} args - method arguments
     * @returns
     * @memberof Contract
     */
    Contract.prototype.encodeAbi = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.getContract().then(function (contract) {
            var methodInstance = contract.method.apply(contract, __spreadArray([method], args, false));
            return methodInstance.encodeABI();
        });
    };
    /**
     * get {r, s, v} from signature
     * @param {string} signature
     *
     * @returns
     * @memberof ERC20
     */
    Contract.prototype.getSignatureParameters = function (signature) {
        var client = this.client.providers[this.contractParam.networkId].provider;
        if (!(0, util_1.isHexString)(signature)) {
            throw new Error('Given value "'.concat(signature, '" is not a valid hex string.'));
        }
        if (signature.slice(0, 2) !== '0x') {
            signature = '0x'.concat(signature);
        }
        var r = signature.slice(0, 66);
        var s = '0x'.concat(signature.slice(66, 130));
        var v = client.hexToNumber('0x'.concat(signature.slice(130, 132)));
        if (![27, 28].includes(v)) {
            v += 27;
        }
        return {
            r: r,
            s: s,
            v: v,
        };
    };
    return Contract;
}(utils_1.BaseToken));
exports.Contract = Contract;


/***/ }),

/***/ "./src/lxly/erc20.ts":
/*!***************************!*\
  !*** ./src/lxly/erc20.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ERC20 = void 0;
var util_1 = __webpack_require__(/*! @ethereumjs/util */ "@ethereumjs/util");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var token_1 = __webpack_require__(/*! ./token */ "./src/lxly/token.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var bridge_adapter_1 = __webpack_require__(/*! ./bridge_adapter */ "./src/lxly/bridge_adapter.ts");
var ERC20 = /** @class */ (function (_super) {
    __extends(ERC20, _super);
    function ERC20(tokenAddress, networkId, bridgeAdapterAddress, client, getContracts) {
        var _this = _super.call(this, {
            networkId: networkId,
            address: tokenAddress,
            bridgeAdapterAddress: bridgeAdapterAddress,
            name: 'ERC20',
        }, client, getContracts) || this;
        if (bridgeAdapterAddress) {
            _this.bridgeAdapter = new bridge_adapter_1.BridgeAdapter(_this.client, bridgeAdapterAddress, networkId);
        }
        return _this;
    }
    /**
     * get bridge for that token
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.getBridgeAddress = function () {
        return this.bridge.contractAddress;
    };
    ERC20.prototype.isEtherToken = function () {
        return this.contractParam.address === __1.ADDRESS_ZERO;
    };
    /**
     * get token balance of user
     *
     * @param {string} userAddress
     * @param {ITransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.getBalance = function (userAddress, option) {
        var _this = this;
        if (this.isEtherToken()) {
            var client = this.client.providers[this.contractParam.networkId].provider;
            return client.getBalance(userAddress);
        }
        else {
            return this.getContract().then(function (contract) {
                var method = contract.method("balanceOf", userAddress);
                return _this.processRead(method, option);
            });
        }
    };
    /**
     * is Approval needed to bridge tokens to other chains
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.isApprovalNeeded = function () {
        if (this.isEtherToken()) {
            return false;
        }
        return this.bridge.getOriginTokenInfo(this.contractParam.address)
            .then(function (tokenInfo) {
            return tokenInfo[1] === __1.ADDRESS_ZERO;
        });
    };
    /**
     * get allowance of user
     *
     * @param {string} userAddress
     * @param {ITransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.getAllowance = function (userAddress, option) {
        var _this = this;
        if (option === void 0) { option = {}; }
        this.checkForNonNative("getAllowance");
        var spenderAddress = option.spenderAddress ? option.spenderAddress : this.getBridgeAddress();
        return this.getContract().then(function (contract) {
            var method = contract.method("allowance", userAddress, spenderAddress);
            return _this.processRead(method, option);
        });
    };
    /**
     * Approve given amount of tokens for user
     *
     * @param {TYPE_AMOUNT} amount
     * @param {IApproveTransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.approve = function (amount, option) {
        var _this = this;
        if (option === void 0) { option = {}; }
        this.checkForNonNative("approve");
        var spenderAddress = option.spenderAddress ? option.spenderAddress : this.getBridgeAddress();
        return this.getContract().then(function (contract) {
            var method = contract.method("approve", spenderAddress, utils_1.Converter.toHex(amount));
            return _this.processWrite(method, option);
        });
    };
    /**
     * Approve max amount of tokens for user
     *
     * @param {IApproveTransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.approveMax = function (option) {
        if (option === void 0) { option = {}; }
        this.checkForNonNative("approveMax");
        return this.approve(__1.MAX_AMOUNT, option);
    };
    /**
     * Bridge given amount of token for user
     *
     * @param {TYPE_AMOUNT} amount
     * @param {string} userAddress
     * @param {number} destinationNetworkId
     * @param {IBridgeTransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.bridgeAsset = function (amount, userAddress, destinationNetworkId, option) {
        if (option === void 0) { option = {}; }
        var permitData = option.permitData || '0x';
        var forceUpdateGlobalExitRoot = option.forceUpdateGlobalExitRoot || true;
        var client = this.client.providers[this.contractParam.networkId].provider;
        var amountInABI = client.encodeParameters([utils_1.Converter.toHex(amount)], ['uint256']);
        if (this.isEtherToken()) {
            option.value = utils_1.Converter.toHex(amount);
        }
        return this.bridge.bridgeAsset(destinationNetworkId, userAddress, amountInABI, this.contractParam.address, forceUpdateGlobalExitRoot, permitData, option);
    };
    /**
     * Bridge given amount of token for user along with ETH for gas token
     *
     * @param {TYPE_AMOUNT} amount
     * @param {string} userAddress
     * @param {number} destinationNetworkId
     * @param {IBridgeTransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.bridgeAssetWithGas = function (amount, userAddress, ethGasAmount, destinationNetworkId, option) {
        if (option === void 0) { option = {}; }
        var client = this.client.providers[this.contractParam.networkId].provider;
        var amountInABI = client.encodeParameters([utils_1.Converter.toHex(amount)], ['uint256']);
        option.value = utils_1.Converter.toHex(ethGasAmount);
        if (option.v && option.r && option.s) {
            return this.wrapper.depositPermitWithGas(this.contractParam.address, destinationNetworkId, userAddress, amountInABI, Math.floor((Date.now() + 3600000) / 1000).toString(), option.v, option.r, option.s, option);
        }
        return this.wrapper.depositWithGas(this.contractParam.address, destinationNetworkId, userAddress, amountInABI, option);
    };
    /**
     * Bridge given amount of token for user along with ETH for gas token
     *
     * @param {TYPE_AMOUNT} amount
     * @param {string} userAddress
     * @param {number} destinationNetworkId
     * @param {IBridgeTransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.bridgeAssetPermitWithGas = function (amount, userAddress, ethGasAmount, destinationNetworkId, option) {
        var _this = this;
        if (option === void 0) { option = {}; }
        this.checkForNonNative("getPermitData");
        var client = this.client.providers[this.contractParam.networkId].provider;
        var amountInABI = client.encodeParameters([utils_1.Converter.toHex(amount)], ['uint256']);
        option.value = utils_1.Converter.toHex(ethGasAmount);
        return this.getPermitSignatureParams_(amount, this.wrapper.contractAddress).then(function (signatureParams) {
            return _this.wrapper.depositPermitWithGas(_this.contractParam.address, destinationNetworkId, userAddress, amountInABI, Math.floor((Date.now() + 3600000) / 1000).toString(), signatureParams.v, signatureParams.r, signatureParams.s, option);
        });
    };
    /**
     * Bridge given amount of token for user with permit call
     *
     * @param {TYPE_AMOUNT} amount
     * @param {string} userAddress
     * @param {number} destinationNetworkId
     * @param {IBridgeTransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.bridgeAssetWithPermit = function (amount, userAddress, destinationNetworkId, option) {
        var _this = this;
        if (option === void 0) { option = {}; }
        this.checkForNonNative("depositWithPermit");
        var client = this.client.providers[this.contractParam.networkId].provider;
        var amountInABI = client.encodeParameters([utils_1.Converter.toHex(amount)], ['uint256']);
        var forceUpdateGlobalExitRoot = option.forceUpdateGlobalExitRoot || true;
        return this.getPermitData(amountInABI, option).then(function (permitData) {
            return _this.bridge.bridgeAsset(destinationNetworkId, userAddress, amountInABI, _this.contractParam.address, forceUpdateGlobalExitRoot, permitData, option);
        });
    };
    /**
     * Bridge asset to child chain using Custom ERC20 bridge Adapter
     * @param {TYPE_AMOUNT} amount
     * @param {string} userAddress
     * @param {number} destinationNetworkId
     * @param {boolean} forceUpdateGlobalExitRoot
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.bridgeCustomERC20 = function (amount, userAddress, destinationNetworkId, forceUpdateGlobalExitRoot, option) {
        if (forceUpdateGlobalExitRoot === void 0) { forceUpdateGlobalExitRoot = true; }
        // should be allowed to be used only in root chain
        this.checkAdapterPresent("depositCustomERC20");
        // should not be allowed to use for native asset
        this.checkForNonNative("depositCustomERC20");
        return this.bridgeAdapter.bridgeToken(userAddress, amount, destinationNetworkId, forceUpdateGlobalExitRoot, option);
    };
    /**
     * Claim asset on child chain bridged using custom bridge adapter
     * @param {string} transactionHash
     * @param {number} sourceNetworkId
     * @param {ITransactionOption} option
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.claimCustomERC20 = function (transactionHash, sourceNetworkId, option) {
        var _this = this;
        return this.bridgeUtil.buildPayloadForClaim(transactionHash, sourceNetworkId, option.bridgeIndex || 0).then(function (payload) {
            return _this.bridge.claimMessage(payload.smtProof, payload.smtProofRollup, payload.globalIndex, payload.mainnetExitRoot, payload.rollupExitRoot, payload.originNetwork, payload.originTokenAddress, payload.destinationNetwork, payload.destinationAddress, payload.amount, payload.metadata, option);
        });
    };
    /**
     * Claim Assets after GlobalExitRootManager is synced from source to destination
     *
     * @param {string} transactionHash
     * @param {number} sourceNetworkId
     * @param {ITransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.claimAsset = function (transactionHash, sourceNetworkId, option) {
        var _this = this;
        return this.bridgeUtil.buildPayloadForClaim(transactionHash, sourceNetworkId, option.bridgeIndex || 0).then(function (payload) {
            return _this.bridge.claimAsset(payload.smtProof, payload.smtProofRollup, payload.globalIndex, payload.mainnetExitRoot, payload.rollupExitRoot, payload.originNetwork, payload.originTokenAddress, payload.destinationNetwork, payload.destinationAddress, payload.amount, payload.metadata, option);
        });
    };
    /**
     * Claim Assets after GlobalExitRootManager is synced from source to destination
     *
     * @param {string[]} smtProof Merkle Proof
     * @param {string[]} smtProofRollup Roll up Merkle Proof
     * @param {string} globalIndex Global Index
     * @param {string} mainnetExitRoot Mainnet Exit Root
     * @param {string} rollupExitRoot RollUP Exit Root
     * @param {number} originNetwork Network at which token was initially deployed
     * @param {string} originTokenAddress Address of token at network where token was initially deployed
     * @param {string} destinationAddress Address to which tokens will be bridged
     * @param {TYPE_AMOUNT} amount amount of tokens
     * @param {string} metadata Metadata of token
     * @param {ITransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.claimAssetRaw = function (smtProof, smtProofRollup, globalIndex, mainnetExitRoot, rollupExitRoot, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata, option) {
        return this.bridge.claimAsset(smtProof, smtProofRollup, globalIndex, mainnetExitRoot, rollupExitRoot, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata, option);
    };
    /**
     * transfer amount to another user
     *
     * @param {TYPE_AMOUNT} amount
     * @param {string} to
     * @param {ITransactionOption} [option]
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.transfer = function (amount, to, option) {
        if (option === void 0) { option = {}; }
        if (this.contractParam.address === __1.ADDRESS_ZERO) {
            option.to = to;
            option.value = utils_1.Converter.toHex(amount);
            return this.sendTransaction(option);
        }
        return this.transferERC20(to, amount, option);
    };
    /**
     * get permitType of the token
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.getPermit = function () {
        var _this = this;
        var contract;
        return this.getContract().then(function (contractInstance) {
            contract = contractInstance;
            var method = contract.method("PERMIT_TYPEHASH");
            return _this.processRead(method);
        }).then(function (permitTypehash) {
            switch (permitTypehash) {
                case __1.DAI_PERMIT_TYPEHASH: {
                    return __1.Permit.DAI;
                }
                case __1.EIP_2612_PERMIT_TYPEHASH: {
                    var DOMAIN_TYPEHASH = contract.method("DOMAIN_TYPEHASH");
                    var EIP712DOMAIN_HASH = contract.method("EIP712DOMAIN_HASH");
                    return (0, utils_1.promiseAny)([_this.processRead(DOMAIN_TYPEHASH), _this.processRead(EIP712DOMAIN_HASH)]).then(function (domainTypehash) {
                        switch (domainTypehash) {
                            case __1.EIP_2612_DOMAIN_TYPEHASH: {
                                return __1.Permit.EIP_2612;
                            }
                            case __1.UNISWAP_DOMAIN_TYPEHASH: {
                                return __1.Permit.UNISWAP;
                            }
                            default: {
                                return Promise.reject(new Error("Unsupported domain typehash: ".concat(domainTypehash)));
                            }
                        }
                    });
                }
                default: {
                    return Promise.reject(new Error("Unsupported permit typehash: ".concat(permitTypehash)));
                }
            }
        });
    };
    /**
     * get typedData for signing
     * @param {string} permitType
     * @param {string} account
     * @param {number} chainId
     * @param {string} name
     * @param {string} nonce
     * @param {string} spenderAddress
     * @param {string} amount
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.getTypedData_ = function (permitType, account, chainId, name, nonce, spenderAddress, amount) {
        var typedData = {
            types: {
                EIP712Domain: [
                    { name: 'name', type: 'string' },
                    { name: 'version', type: 'string' },
                    { name: 'chainId', type: 'uint256' },
                    { name: 'verifyingContract', type: 'address' }
                ],
                Permit: []
            },
            primaryType: "Permit",
            domain: {
                name: name,
                version: "1",
                chainId: chainId,
                verifyingContract: this.contractParam.address,
            },
            message: {}
        };
        switch (permitType) {
            case __1.Permit.DAI:
                typedData.types.Permit = [
                    { name: "holder", type: "address" },
                    { name: "spender", type: "address" },
                    { name: "nonce", type: "uint256" },
                    { name: "expiry", type: "uint256" },
                    { name: "allowed", type: "bool" },
                ];
                typedData.message = {
                    holder: account,
                    spender: spenderAddress,
                    nonce: nonce,
                    expiry: Math.floor((Date.now() + 3600000) / 1000),
                    allowed: true,
                };
            case __1.Permit.EIP_2612:
            case __1.Permit.UNISWAP:
                if (permitType === __1.Permit.UNISWAP) {
                    typedData.types.EIP712Domain = [
                        { name: 'name', type: 'string' },
                        { name: 'chainId', type: 'uint256' },
                        { name: 'verifyingContract', type: 'address' }
                    ];
                    delete typedData.domain.version;
                }
                typedData.types.Permit = [
                    { name: 'owner', type: 'address' },
                    { name: 'spender', type: 'address' },
                    { name: 'value', type: 'uint256' },
                    { name: 'nonce', type: 'uint256' },
                    { name: 'deadline', type: 'uint256' }
                ];
                typedData.message = {
                    owner: account,
                    spender: spenderAddress,
                    value: amount,
                    nonce: nonce,
                    deadline: Math.floor((Date.now() + 3600000) / 1000),
                };
        }
        return typedData;
    };
    /**
     * get {r, s, v} from signature
     * @param {BaseWeb3Client} client
     * @param {string} signature
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.getSignatureParameters_ = function (client, signature) {
        if (!(0, util_1.isHexString)(signature)) {
            throw new Error('Given value "'.concat(signature, '" is not a valid hex string.'));
        }
        if (signature.slice(0, 2) !== '0x') {
            signature = '0x'.concat(signature);
        }
        var r = signature.slice(0, 66);
        var s = '0x'.concat(signature.slice(66, 130));
        var v = client.hexToNumber('0x'.concat(signature.slice(130, 132)));
        if (![27, 28].includes(v)) {
            v += 27;
        }
        return {
            r: r,
            s: s,
            v: v,
        };
    };
    /**
     * encode permit function data
     * @param {BaseContract} contract
     * @param {string} permitType
     * @param {any} signatureParams
     * @param {string} spenderAddress
     * @param {string} account
     * @param {string} nonce
     * @param {string} amount
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.encodePermitFunctionData_ = function (contract, permitType, signatureParams, spenderAddress, account, nonce, amount) {
        var r = signatureParams.r, s = signatureParams.s, v = signatureParams.v;
        var method;
        switch (permitType) {
            case __1.Permit.DAI:
                method = contract.method("permit", account, spenderAddress, nonce, Math.floor((Date.now() + 3600000) / 1000), true, v, r, s);
                break;
            case __1.Permit.EIP_2612:
            case __1.Permit.UNISWAP:
                method = contract.method("permit", account, spenderAddress, amount, Math.floor((Date.now() + 3600000) / 1000), v, r, s);
                break;
        }
        return method.encodeABI();
    };
    ERC20.prototype.getPermitSignatureParams_ = function (amount, spenderAddress) {
        var _this = this;
        var client = this.client.providers[this.contractParam.networkId].provider;
        var amountInABI = client.encodeParameters([utils_1.Converter.toHex(amount)], ['uint256']);
        var account;
        var chainId;
        var permitType;
        var contract;
        var nonce;
        return Promise.all([client.name === 'WEB3' ? client.getAccountsUsingRPC_() : client.getAccounts(), this.getContract(), client.getChainId(), this.getPermit()]).then(function (result) {
            account = result[0][0];
            contract = result[1];
            chainId = result[2];
            permitType = result[3];
            var nameMethod = contract.method("name");
            var nonceMethod = contract.method("nonces", account);
            return Promise.all([_this.processRead(nameMethod), _this.processRead(nonceMethod)]);
        }).then(function (data) {
            var name = data[0];
            nonce = data[1];
            return _this.getTypedData_(permitType, account, chainId, name, nonce, spenderAddress, amountInABI);
        }).then(function (typedData) {
            return client.signTypedData(account, typedData);
        }).then(function (signature) {
            return _this.getSignatureParameters_(client, signature);
        });
    };
    /**
     * Get permit data for given spender for given amount
     * @param {TYPE_AMOUNT} amount
     * @param {string} spenderAddress
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.getPermitData_ = function (amount, spenderAddress) {
        var _this = this;
        var client = this.client.providers[this.contractParam.networkId].provider;
        var amountInABI = client.encodeParameters([utils_1.Converter.toHex(amount)], ['uint256']);
        var account;
        var chainId;
        var permitType;
        var contract;
        var nonce;
        return Promise.all([client.name === 'WEB3' ? client.getAccountsUsingRPC_() : client.getAccounts(), this.getContract(), client.getChainId(), this.getPermit()]).then(function (result) {
            account = result[0][0];
            contract = result[1];
            chainId = result[2];
            permitType = result[3];
            var nameMethod = contract.method("name");
            var nonceMethod = contract.method("nonces", account);
            return Promise.all([_this.processRead(nameMethod), _this.processRead(nonceMethod)]);
        }).then(function (data) {
            var name = data[0];
            nonce = data[1];
            return _this.getTypedData_(permitType, account, chainId, name, nonce, spenderAddress, amountInABI);
        }).then(function (typedData) {
            return client.signTypedData(account, typedData);
        }).then(function (signature) {
            var signatureParameters = _this.getSignatureParameters_(client, signature);
            return _this.encodePermitFunctionData_(contract, permitType, signatureParameters, spenderAddress, account, nonce, amountInABI);
        });
    };
    /**
     * Get permit data for given amount
     * @param {TYPE_AMOUNT} amount
     * @param {IApproveTransactionOption} option
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.getPermitData = function (amount, option) {
        if (option === void 0) { option = {}; }
        this.checkForNonNative("getPermitData");
        var spenderAddress = option.spenderAddress ? option.spenderAddress : this.getBridgeAddress();
        return this.getPermitData_(amount, spenderAddress);
    };
    /**
     * Get the plot route call data for bridge asset and gas
     * @param {ICargo} cargo
     * @param {ITransactionOption} option
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.getPlotRoute = function (cargo, option) {
        var client = this.client.providers[this.contractParam.networkId].provider;
        return this.gasPorter.plotRoute(cargo, option).then(function (data) {
            var callDataParams = client.decodeParameters("0x".concat(data.callData.slice(10)), [
                'bool',
                'bool',
                'uint32',
                'address',
                'uint256',
                'address',
                'uint32',
                'bytes',
                'uint256',
                'bytes',
                'address',
                'uint256',
                'bytes'
            ]);
            return {
                bridgeAssetAndGas: {
                    requestConversion: callDataParams[0],
                    forceUpdateGlobalExitRoot: callDataParams[1],
                    destinationNetwork: callDataParams[2],
                    destinationAddress: callDataParams[3],
                    trackingNumber: callDataParams[4],
                    gasset: callDataParams[5],
                    gassetSource: callDataParams[6],
                    gassetPermitData: callDataParams[7] || '0x',
                    gassetAmount: callDataParams[8],
                    swapCalldata: callDataParams[9] || '0x',
                    token: callDataParams[10],
                    tokenAmount: callDataParams[11],
                    tokenPermitData: callDataParams[12] || '0x'
                },
                callData: data.callData,
                msgValue: data.msgValue
            };
        });
    };
    /**
     * bridge asset and gas function
     * @param {boolean} requestConversion - It tells if the conversion is required on destination chain or not
     * @param {boolean} forceUpdateGlobalExitRoot
     * @param {number} destinationNetwork - the network on which the funds needs to be bridged
     * @param {string} destinationAddress - the address to which funds will be deposited
     * @param {string} gasset - address of the gas token
     * @param {GassetSource} gassetSource - the source of the gas token amount. it can be directly msg value, or dex swap or if user already has the ERC20 token then erc20.
     * @param {string} gassetPermitData - Permit data required to give permit to gasPorter for the gas token.
     * @param {string} gassetAmount - amount of gas token to be bridged
     * @param {string} swapCalldata - swap call data if swapping is required on the source chain
     * @param {string} token - token to be bridged
     * @param {string} tokenAmount - amount of token to be bridged
     * @param {string} tokenPermitData - Permit data required to give permit to gasPorter for the token to be bridged.
     * @param {ITransactionOption} option
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.bridgeAssetAndGas = function (requestConversion, forceUpdateGlobalExitRoot, destinationNetwork, destinationAddress, trackingNumber, gasset, gassetSource, gassetPermitData, gassetAmount, swapCalldata, token, tokenAmount, tokenPermitData, option) {
        return this.gasPorter.bridgeAssetAndGas(requestConversion, forceUpdateGlobalExitRoot, destinationNetwork, destinationAddress, trackingNumber, gasset, gassetSource, gassetPermitData, gassetAmount, swapCalldata, token, tokenAmount, tokenPermitData, option);
    };
    /**
     * Get the plot route call data for bridge asset and gas and then do the bridgeAssetAndGas transaction
     * @param {ICargo} cargo
     * @param {ITransactionOption} option
     *
     * @returns
     * @memberof ERC20
     */
    ERC20.prototype.bridgeAssetAndGasWithPlotRoute = function (cargo, option) {
        var _this = this;
        return this.getPlotRoute(cargo).then(function (data) {
            return _this.gasPorter.bridgeAssetAndGas(data.bridgeAssetAndGas.requestConversion, data.bridgeAssetAndGas.forceUpdateGlobalExitRoot, data.bridgeAssetAndGas.destinationNetwork, data.bridgeAssetAndGas.destinationAddress, data.bridgeAssetAndGas.trackingNumber, data.bridgeAssetAndGas.gasset, data.bridgeAssetAndGas.gassetSource, data.bridgeAssetAndGas.gassetPermitData, data.bridgeAssetAndGas.gassetAmount, data.bridgeAssetAndGas.swapCalldata, data.bridgeAssetAndGas.token, data.bridgeAssetAndGas.tokenAmount, data.bridgeAssetAndGas.tokenPermitData, __assign(__assign({}, option), { value: data.msgValue }));
        });
    };
    ERC20.prototype.convertGasset = function (data, signature, option) {
        return this.gasPorter.convertGasset(data, signature, option);
    };
    return ERC20;
}(token_1.Token));
exports.ERC20 = ERC20;


/***/ }),

/***/ "./src/lxly/gas_porter.ts":
/*!********************************!*\
  !*** ./src/lxly/gas_porter.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GasPorter = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var GasPorter = /** @class */ (function (_super) {
    __extends(GasPorter, _super);
    function GasPorter(client_, address, networkId) {
        return _super.call(this, {
            address: address,
            name: 'GasPorter',
            networkId: networkId
        }, client_) || this;
    }
    GasPorter.prototype.method = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.getContract().then(function (contract) {
            return contract.method.apply(contract, __spreadArray([methodName], args, false));
        });
    };
    GasPorter.prototype.plotRoute = function (cargo, option) {
        var _this = this;
        return this.method("plotRoute", cargo).then(function (method) {
            return _this.processRead(method, option);
        });
    };
    GasPorter.prototype.bridgeAssetAndGas = function (requestConversion, forceUpdateGlobalExitRoot, destinationNetwork, destinationAddress, trackingNumber, gasset, gassetSource, gassetPermitData, gassetAmount, swapCalldata, token, tokenAmount, tokenPermitData, option) {
        var _this = this;
        return this.method("bridgeAssetAndGas", requestConversion, forceUpdateGlobalExitRoot, destinationNetwork, destinationAddress, trackingNumber, gasset, gassetSource, gassetPermitData, gassetAmount, swapCalldata, token, tokenAmount, tokenPermitData).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    GasPorter.prototype.convertGasset = function (data, signature, option) {
        var _this = this;
        return this.method("convertGasset", data, signature).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    GasPorter.prototype.determineGasset = function (destinationNetworkGasTokenNetwork, destinationNetworkGasTokenAddress, gassetType, option) {
        var _this = this;
        return this.method("determineGasset", destinationNetworkGasTokenNetwork, destinationNetworkGasTokenAddress, gassetType).then(function (method) {
            return _this.processRead(method, option);
        });
    };
    GasPorter.prototype.determineConversion = function (destinationNetworkGasTokenNetwork, destinationNetworkGasTokenAddress, gasset, option) {
        var _this = this;
        return this.method("determineConversion", destinationNetworkGasTokenNetwork, destinationNetworkGasTokenAddress, gasset).then(function (method) {
            return _this.processRead(method, option);
        });
    };
    return GasPorter;
}(utils_1.BaseToken));
exports.GasPorter = GasPorter;


/***/ }),

/***/ "./src/lxly/index.ts":
/*!***************************!*\
  !*** ./src/lxly/index.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LxLyClient = void 0;
var erc20_1 = __webpack_require__(/*! ./erc20 */ "./src/lxly/erc20.ts");
var vault_bridge_1 = __webpack_require__(/*! ./vault_bridge */ "./src/lxly/vault_bridge.ts");
var contract_1 = __webpack_require__(/*! ./contract */ "./src/lxly/contract.ts");
var bridge_1 = __webpack_require__(/*! ./bridge */ "./src/lxly/bridge.ts");
var bridge_util_1 = __webpack_require__(/*! ./bridge_util */ "./src/lxly/bridge_util.ts");
var bridge_extension_1 = __webpack_require__(/*! ./bridge_extension */ "./src/lxly/bridge_extension.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var config_1 = __webpack_require__(/*! ../config */ "./src/config.ts");
var services_1 = __webpack_require__(/*! ../services */ "./src/services/index.ts");
var wrapper_1 = __webpack_require__(/*! ./wrapper */ "./src/lxly/wrapper.ts");
var gas_porter_1 = __webpack_require__(/*! ./gas_porter */ "./src/lxly/gas_porter.ts");
__exportStar(__webpack_require__(/*! ./bridge */ "./src/lxly/bridge.ts"), exports);
__exportStar(__webpack_require__(/*! ./bridge_util */ "./src/lxly/bridge_util.ts"), exports);
__exportStar(__webpack_require__(/*! ./wrapper */ "./src/lxly/wrapper.ts"), exports);
__exportStar(__webpack_require__(/*! ./bridge_extension */ "./src/lxly/bridge_extension.ts"), exports);
__exportStar(__webpack_require__(/*! ./gas_porter */ "./src/lxly/gas_porter.ts"), exports);
var LxLyClient = /** @class */ (function (_super) {
    __extends(LxLyClient, _super);
    function LxLyClient() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.wrappers = {};
        _this.gasPorters = {};
        return _this;
    }
    LxLyClient.prototype.init = function (config) {
        var _this = this;
        var client = this.client;
        return client.init(config).then(function (_) {
            for (var _i = 0, _a = Object.entries(config.providers); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                if (value.configuration.bridgeAddress) {
                    _this.bridges[key] = new bridge_1.Bridge(_this.client, value.configuration.bridgeAddress, Number(key));
                }
                if (value.configuration.wrapperAddress) {
                    _this.wrappers[key] = new wrapper_1.Wrapper(_this.client, value.configuration.wrapperAddress, Number(key));
                }
                if (value.configuration.bridgeExtensionAddress) {
                    _this.bridgeExtensions[key] = new bridge_extension_1.BridgeExtension(_this.client, value.configuration.bridgeExtensionAddress, Number(key));
                }
                if (value.configuration.gasPorterAddress) {
                    _this.gasPorters[key] = new gas_porter_1.GasPorter(_this.client, value.configuration.gasPorterAddress, Number(key));
                }
            }
            if (!services_1.service.network) {
                (0, utils_1.setProofApi)(config_1.config.BridgeService[config.network]);
            }
            _this.bridgeUtil = new bridge_util_1.BridgeUtil(_this.client);
            return _this;
        });
    };
    /**
     * creates instance of ERC20 token
     *
     * @param {string} tokenAddress
     * @param {boolean} isParent
     *
     * @param bridgeAdapterAddress Needed if a custom erc20 token is being bridged
     * @returns
     * @memberof ERC20
     */
    LxLyClient.prototype.erc20 = function (tokenAddress, networkId, bridgeAdapterAddress) {
        return new erc20_1.ERC20(tokenAddress, networkId, bridgeAdapterAddress, this.client, this.getContracts_.bind(this));
    };
    /**
     * creates instance of vault bridge token
     *
     * @param {string} vaultAddress
     * @param {boolean} networkId
     *
     * @returns
     * @memberof VaultBridge
     */
    LxLyClient.prototype.vaultBridge = function (vaultAddress, networkId) {
        return new vault_bridge_1.VaultBridge(vaultAddress, networkId, this.client, this.getContracts_.bind(this));
    };
    /**
     * creates instance of ERC20 token
     *
     * @param {AbiItem[]} abi
     * @param {string} tokenAddress
     * @param {number} networkId
     *
     * @returns
     * @memberof Contract
     */
    LxLyClient.prototype.contract = function (abi, tokenAddress, networkId) {
        return new contract_1.Contract(abi, tokenAddress, networkId, this.client);
    };
    LxLyClient.prototype.getContracts_ = function (networkId) {
        return {
            bridge: this.bridges[networkId],
            bridgeUtil: this.bridgeUtil,
            wrapper: this.wrappers[networkId],
            bridgeExtension: this.bridgeExtensions[networkId],
            gasPorter: this.gasPorters[networkId]
        };
    };
    return LxLyClient;
}(utils_1.BridgeClient));
exports.LxLyClient = LxLyClient;


/***/ }),

/***/ "./src/lxly/token.ts":
/*!***************************!*\
  !*** ./src/lxly/token.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Token = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var Token = /** @class */ (function (_super) {
    __extends(Token, _super);
    function Token(contractParam, client, getContracts) {
        var _this = _super.call(this, contractParam, client) || this;
        _this.getContracts = getContracts;
        _this.contracts = _this.getContracts(contractParam.networkId);
        return _this;
    }
    Object.defineProperty(Token.prototype, "bridge", {
        get: function () {
            return this.contracts.bridge;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "wrapper", {
        get: function () {
            return this.contracts.wrapper;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "gasPorter", {
        get: function () {
            return this.contracts.gasPorter;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Token.prototype, "bridgeUtil", {
        get: function () {
            return this.contracts.bridgeUtil;
        },
        enumerable: false,
        configurable: true
    });
    return Token;
}(utils_1.BaseToken));
exports.Token = Token;


/***/ }),

/***/ "./src/lxly/vault_bridge.ts":
/*!**********************************!*\
  !*** ./src/lxly/vault_bridge.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VaultBridge = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var token_1 = __webpack_require__(/*! ./token */ "./src/lxly/token.ts");
var VaultBridge = /** @class */ (function (_super) {
    __extends(VaultBridge, _super);
    function VaultBridge(address, networkId, client, getContracts) {
        return _super.call(this, {
            address: address,
            name: 'GenericVaultBridgeToken',
            networkId: networkId
        }, client, getContracts) || this;
    }
    VaultBridge.prototype.method = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.getContract().then(function (contract) {
            return contract.method.apply(contract, __spreadArray([methodName], args, false));
        });
    };
    VaultBridge.prototype.depositAndBridge = function (asset, receiver, destinationNetworkId, forceUpdateGlobalExitRoot, option) {
        var _this = this;
        return this.method("depositAndBridge", asset, receiver, destinationNetworkId, forceUpdateGlobalExitRoot).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    VaultBridge.prototype.depositGasTokenAndBridge = function (asset, receiver, destinationNetworkId, forceUpdateGlobalExitRoot, option) {
        var _this = this;
        option.value = utils_1.Converter.toHex(asset);
        return this.method("depositGasTokenAndBridge", receiver, destinationNetworkId, forceUpdateGlobalExitRoot).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    VaultBridge.prototype.claimAndRedeem = function (transactionHash, sourceNetworkId, option) {
        var _this = this;
        return this.bridgeUtil.buildPayloadForClaim(transactionHash, sourceNetworkId, option.bridgeIndex || 0).then(function (payload) {
            return _this.method("claimAndRedeem", payload.smtProof, payload.smtProofRollup, payload.globalIndex, payload.mainnetExitRoot, payload.rollupExitRoot, payload.destinationAddress, payload.amount, payload.destinationAddress, payload.metadata).then(function (method) {
                return _this.processWrite(method, option);
            });
        });
    };
    return VaultBridge;
}(token_1.Token));
exports.VaultBridge = VaultBridge;


/***/ }),

/***/ "./src/lxly/wrapper.ts":
/*!*****************************!*\
  !*** ./src/lxly/wrapper.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Wrapper = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var Wrapper = /** @class */ (function (_super) {
    __extends(Wrapper, _super);
    function Wrapper(client_, address, networkId) {
        return _super.call(this, {
            address: address,
            name: 'ZkEVMWrapper',
            networkId: networkId
        }, client_) || this;
    }
    Wrapper.prototype.method = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.getContract().then(function (contract) {
            return contract.method.apply(contract, __spreadArray([methodName], args, false));
        });
    };
    Wrapper.prototype.depositWithGas = function (tokenAddress, destinationNetwork, userAddress, depositAmount, option) {
        var _this = this;
        return this.method("deposit", tokenAddress, destinationNetwork, userAddress, depositAmount).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    Wrapper.prototype.depositPermitWithGas = function (tokenAddress, destinationNetwork, userAddress, depositAmount, deadline, v, r, s, option) {
        var _this = this;
        return this.method("deposit", tokenAddress, destinationNetwork, userAddress, depositAmount, deadline, v, r, s).then(function (method) {
            return _this.processWrite(method, option);
        });
    };
    return Wrapper;
}(utils_1.BaseToken));
exports.Wrapper = Wrapper;


/***/ }),

/***/ "./src/services/abi_service.ts":
/*!*************************************!*\
  !*** ./src/services/abi_service.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ABIService = void 0;
var testnet_1 = __importDefault(__webpack_require__(/*! ../abis/testnet */ "./src/abis/testnet/index.ts"));
// import mainnetAbis from "../abis/mainnet";
var ABIService = /** @class */ (function () {
    function ABIService(network) {
        this.network = network;
    }
    ABIService.prototype.getABI = function (contractName) {
        return testnet_1.default[contractName];
    };
    return ABIService;
}());
exports.ABIService = ABIService;


/***/ }),

/***/ "./src/services/index.ts":
/*!*******************************!*\
  !*** ./src/services/index.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.service = void 0;
__exportStar(__webpack_require__(/*! ./network_service */ "./src/services/network_service.ts"), exports);
__exportStar(__webpack_require__(/*! ./abi_service */ "./src/services/abi_service.ts"), exports);
var Service = /** @class */ (function () {
    function Service() {
    }
    return Service;
}());
exports.service = new Service();


/***/ }),

/***/ "./src/services/network_service.ts":
/*!*****************************************!*\
  !*** ./src/services/network_service.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NetworkService = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var NetworkService = /** @class */ (function () {
    function NetworkService(baseUrl) {
        this.httpRequest = new utils_1.HttpRequest(baseUrl);
    }
    NetworkService.prototype.createUrl = function (url) {
        return "".concat(url);
    };
    NetworkService.prototype.getMerkleProof = function (networkID, depositCount) {
        var url = this.createUrl("merkle-proof?networkId=".concat(networkID, "&depositCount=").concat(depositCount));
        return this.httpRequest.get(url).then(function (result) {
            return result.proof;
        });
    };
    NetworkService.prototype.getBridgeTransactionDetails = function (networkID, depositCount) {
        var url = this.createUrl("bridge?net_id=".concat(networkID, "&deposit_cnt=").concat(depositCount));
        return this.httpRequest.get(url).then(function (result) {
            return result.deposit;
        });
    };
    return NetworkService;
}());
exports.NetworkService = NetworkService;


/***/ }),

/***/ "./src/types/index.ts":
/*!****************************!*\
  !*** ./src/types/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/utils/base_token.ts":
/*!*********************************!*\
  !*** ./src/utils/base_token.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseToken = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var promise_resolve_1 = __webpack_require__(/*! ./promise_resolve */ "./src/utils/promise_resolve.ts");
var enums_1 = __webpack_require__(/*! ../enums */ "./src/enums/index.ts");
var error_helper_1 = __webpack_require__(/*! ./error_helper */ "./src/utils/error_helper.ts");
var constant_1 = __webpack_require__(/*! ../constant */ "./src/constant.ts");
var BaseToken = /** @class */ (function () {
    function BaseToken(contractParam, client) {
        this.contractParam = contractParam;
        this.client = client;
    }
    Object.defineProperty(BaseToken.prototype, "contractAddress", {
        get: function () {
            return this.contractParam.address;
        },
        enumerable: false,
        configurable: true
    });
    BaseToken.prototype.getContract = function () {
        if (this.contract_) {
            return (0, promise_resolve_1.promiseResolve)(this.contract_);
        }
        var contractParam = this.contractParam;
        var abi = contractParam.abi || this.client.abiManager.getABI(contractParam.name);
        if (!abi) {
            return Promise.reject(new Error("Abi not found"));
        }
        this.contract_ = this.getContract_({
            abi: abi,
            networkId: contractParam.networkId,
            tokenAddress: contractParam.address
        });
        if (!this.contract_) {
            return Promise.reject(new Error("Cannot find provider for network ".concat(contractParam.networkId)));
        }
        return Promise.resolve(this.contract_);
    };
    BaseToken.prototype.getChainId = function () {
        var _this = this;
        if (this.chainId_) {
            return (0, promise_resolve_1.promiseResolve)(this.chainId_);
        }
        var client = this.getClient(this.contractParam.networkId);
        return client.getChainId().then(function (chainId) {
            _this.chainId_ = chainId;
            return _this.chainId_;
        });
    };
    BaseToken.prototype.processWrite = function (method, option) {
        var _this = this;
        if (option === void 0) { option = {}; }
        this.validateTxOption_(option);
        this.client.logger.log("process write");
        return this.createTransactionConfig({
            txConfig: option,
            isWrite: true,
            method: method,
            networkId: this.contractParam.networkId
        }).then(function (config) {
            _this.client.logger.log("process write config");
            if (option.returnTransaction) {
                return (0, utils_1.merge)(config, {
                    data: method.encodeABI(),
                    to: method.address
                });
            }
            var methodResult = method.write(config);
            return methodResult;
        });
    };
    BaseToken.prototype.sendTransaction = function (option) {
        if (option === void 0) { option = {}; }
        this.validateTxOption_(option);
        var networkId = this.contractParam.networkId;
        var client = this.getClient(networkId);
        client.logger.log("process write");
        return this.createTransactionConfig({
            txConfig: option,
            isWrite: true,
            method: null,
            networkId: networkId
        }).then(function (config) {
            client.logger.log("process write config");
            if (option.returnTransaction) {
                return config;
            }
            var methodResult = client.write(config);
            return methodResult;
        });
    };
    BaseToken.prototype.readTransaction = function (option) {
        if (option === void 0) { option = {}; }
        this.validateTxOption_(option);
        var networkId = this.contractParam.networkId;
        var client = this.getClient(networkId);
        client.logger.log("process read");
        return this.createTransactionConfig({
            txConfig: option,
            isWrite: true,
            method: null,
            networkId: networkId
        }).then(function (config) {
            client.logger.log("write tx config created");
            if (option.returnTransaction) {
                return config;
            }
            return client.read(config);
        });
    };
    BaseToken.prototype.validateTxOption_ = function (option) {
        if (typeof option !== 'object' || Array.isArray(option)) {
            new error_helper_1.ErrorHelper(enums_1.ERROR_TYPE.TransactionOptionNotObject).throw();
        }
    };
    BaseToken.prototype.processRead = function (method, option) {
        var _this = this;
        if (option === void 0) { option = {}; }
        this.validateTxOption_(option);
        this.client.logger.log("process read");
        return this.createTransactionConfig({
            txConfig: option,
            isWrite: false,
            method: method,
            networkId: this.contractParam.networkId
        }).then(function (config) {
            _this.client.logger.log("read tx config created");
            if (option.returnTransaction) {
                return (0, utils_1.merge)(config, {
                    data: method.encodeABI(),
                    to: _this.contract_.address
                });
            }
            return method.read(config);
        });
    };
    BaseToken.prototype.getClient = function (networkId) {
        return this.client.providers[networkId].provider;
    };
    BaseToken.prototype.getContract_ = function (_a) {
        var networkId = _a.networkId, tokenAddress = _a.tokenAddress, abi = _a.abi;
        var client = this.getClient(networkId);
        return client.getContract(tokenAddress, abi);
    };
    BaseToken.prototype.createTransactionConfig = function (_a) {
        var _this = this;
        var txConfig = _a.txConfig, method = _a.method, networkId = _a.networkId, isWrite = _a.isWrite;
        var defaultConfig = this.client.providers[networkId].defaultConfig;
        txConfig = (0, utils_1.merge)(defaultConfig, (txConfig || {}));
        var client = this.client.providers[networkId].provider;
        client.logger.log("txConfig", txConfig, "onNetwork", networkId, "isWrite", isWrite);
        var estimateGas = function (config) { return __awaiter(_this, void 0, void 0, function () {
            var result, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!method) return [3 /*break*/, 2];
                        return [4 /*yield*/, method.estimateGas(config)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, client.estimateGas(config)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        result = _a;
                        return [2 /*return*/, new utils_1.utils.BN(Math.trunc(Number(result) * 1.15)).toString()];
                }
            });
        }); };
        // txConfig.chainId = Converter.toHex(txConfig.chainId) as any;
        if (isWrite) {
            return this.getChainId().then(function (clientChainId) {
                var maxFeePerGas = txConfig.maxFeePerGas, maxPriorityFeePerGas = txConfig.maxPriorityFeePerGas;
                var isEIP1559Supported = _this.client.getConfiguration(networkId).isEIP1559Supported || false;
                var isMaxFeeProvided = (maxFeePerGas || maxPriorityFeePerGas);
                txConfig.chainId = txConfig.chainId || clientChainId;
                if (!isEIP1559Supported && isMaxFeeProvided) {
                    client.logger.error(enums_1.ERROR_TYPE.EIP1559NotSupported, networkId).throw();
                }
                // const [gasLimit, nonce] = 
                return Promise.all([
                    !(txConfig.gasLimit)
                        ? estimateGas({
                            from: txConfig.from, value: txConfig.value, to: txConfig.to
                        })
                        : txConfig.gasLimit,
                    !txConfig.nonce ?
                        client.getTransactionCount(txConfig.from, 'pending')
                        : txConfig.nonce
                ]).then(function (result) {
                    var gasLimit = result[0], nonce = result[1];
                    client.logger.log("options filled");
                    txConfig.gasLimit = Number(gasLimit);
                    txConfig.nonce = nonce;
                    return txConfig;
                });
            });
        }
        return (0, promise_resolve_1.promiseResolve)(txConfig);
    };
    BaseToken.prototype.transferERC20 = function (to, amount, option) {
        var _this = this;
        return this.getContract().then(function (contract) {
            var method = contract.method("transfer", to, utils_1.Converter.toHex(amount));
            return _this.processWrite(method, option);
        });
    };
    BaseToken.prototype.checkForNonNative = function (methodName) {
        if (this.contractParam.address === constant_1.ADDRESS_ZERO) {
            this.client.logger.error(enums_1.ERROR_TYPE.AllowedOnNonNativeTokens, methodName).throw();
        }
    };
    BaseToken.prototype.checkForEthereum = function (methodName) {
        if (this.contractParam.networkId !== 0) {
            this.client.logger.error(enums_1.ERROR_TYPE.AllowedOnEthereum, methodName).throw();
        }
    };
    BaseToken.prototype.checkAdapterPresent = function (methodName) {
        if (!this.contractParam.bridgeAdapterAddress) {
            this.client.logger.error(enums_1.ERROR_TYPE.BridgeAdapterNotFound, methodName).throw();
        }
    };
    return BaseToken;
}());
exports.BaseToken = BaseToken;


/***/ }),

/***/ "./src/utils/bridge_client.ts":
/*!************************************!*\
  !*** ./src/utils/bridge_client.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BridgeClient = void 0;
var _1 = __webpack_require__(/*! . */ "./src/utils/index.ts");
var services_1 = __webpack_require__(/*! ../services */ "./src/services/index.ts");
var BridgeClient = /** @class */ (function () {
    function BridgeClient() {
        this.client = new _1.Web3SideChainClient();
        this.bridges = {};
        this.bridgeExtensions = {};
    }
    /**
     * check if the bridge is claimable
     *
     * @param {string} txHash
     * @param {string} sourceNetwork
     * @param {number} [bridgeIndex=0]
     * @returns
     * @memberof BridgeClient
     */
    BridgeClient.prototype.isBridgeClaimable = function (txHash, sourceNetwork, bridgeIndex) {
        if (bridgeIndex === void 0) { bridgeIndex = 0; }
        return this.bridgeUtil.getBridgeLogData(txHash, sourceNetwork, bridgeIndex).then(function (result) {
            return services_1.service.network.getBridgeTransactionDetails(sourceNetwork, result.depositCount);
        }).then(function (details) {
            return details.ready_for_claim;
        });
    };
    /**
     * check whether deposit is completed
     *
     * @param {string} txHash
     * @param {string} sourceNetwork
     * @param {string} destinationNetwork
     * @param {string} [bridgeIndex=0]
     * @returns
     * @memberof BridgeClient
     */
    BridgeClient.prototype.isBridged = function (txHash, sourceNetwork, destinationNetwork, bridgeIndex) {
        var _this = this;
        if (bridgeIndex === void 0) { bridgeIndex = 0; }
        return this.bridgeUtil.getBridgeLogData(txHash, sourceNetwork, bridgeIndex).then(function (result) {
            return _this.bridges[destinationNetwork].isClaimed(result.depositCount, sourceNetwork);
        });
    };
    return BridgeClient;
}());
exports.BridgeClient = BridgeClient;


/***/ }),

/***/ "./src/utils/converter.ts":
/*!********************************!*\
  !*** ./src/utils/converter.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Converter = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
var Converter = /** @class */ (function () {
    function Converter() {
    }
    Converter.toHex = function (amount) {
        var dataType = typeof amount;
        if (dataType === 'number') {
            amount = new utils_1.utils.BN(amount);
        }
        else if (dataType === 'string') {
            if (amount.slice(0, 2) === '0x') {
                return amount;
            }
            amount = new utils_1.utils.BN(amount);
        }
        if (utils_1.utils.BN.isBN(amount)) {
            return '0x' + amount.toString(16);
        }
        else {
            throw new Error("Invalid value ".concat(amount, ", value is not a number."));
        }
    };
    Converter.toBN = function (amount) {
        var dataType = typeof amount;
        if (dataType === 'string') {
            if (amount.slice(0, 2) === '0x') {
                amount = parseInt(amount, 16);
            }
        }
        if (!utils_1.utils.BN.isBN(amount)) {
            amount = new utils_1.utils.BN(amount);
        }
        return amount;
    };
    return Converter;
}());
exports.Converter = Converter;


/***/ }),

/***/ "./src/utils/error_helper.ts":
/*!***********************************!*\
  !*** ./src/utils/error_helper.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorHelper = void 0;
var enums_1 = __webpack_require__(/*! ../enums */ "./src/enums/index.ts");
var ErrorHelper = /** @class */ (function () {
    function ErrorHelper(type, info) {
        this.type = type;
        this.message = this.getMsg_(info);
    }
    ErrorHelper.prototype.throw = function () {
        throw this.get();
    };
    ErrorHelper.prototype.get = function () {
        return {
            message: this.message,
            type: this.type
        };
    };
    ErrorHelper.prototype.getMsg_ = function (info) {
        var errMsg;
        switch (this.type) {
            case enums_1.ERROR_TYPE.AllowedOnEthereum:
                errMsg = "The action ".concat(info, " is allowed only on ethereum.");
                break;
            case enums_1.ERROR_TYPE.AllowedOnMainnet:
                errMsg = "The action is allowed only on mainnet chains.";
                break;
            case enums_1.ERROR_TYPE.ProofAPINotSet:
                errMsg = "Proof api is not set, please set it using \"setProofApi\"";
                break;
            case enums_1.ERROR_TYPE.BurnTxNotCheckPointed:
                errMsg = "Burn transaction has not been checkpointed as yet";
                break;
            case enums_1.ERROR_TYPE.EIP1559NotSupported:
                errMsg = "".concat(info ? 'Root' : 'Child', " chain doesn't support eip-1559");
                break;
            case enums_1.ERROR_TYPE.NullSpenderAddress:
                errMsg = "Please provide spender address.";
                break;
            default:
                if (!this.type) {
                    this.type = enums_1.ERROR_TYPE.Unknown;
                }
                errMsg = this.message;
                break;
        }
        return errMsg;
    };
    return ErrorHelper;
}());
exports.ErrorHelper = ErrorHelper;


/***/ }),

/***/ "./src/utils/event_bus.ts":
/*!********************************!*\
  !*** ./src/utils/event_bus.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports) {


var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventBus = exports.eventBusPromise = void 0;
var eventBusPromise = function (executor) {
    var promise = new Promise(executor);
    var eventBus = new EventBus();
    promise.on = eventBus.on.bind(eventBus);
    promise.emit = eventBus.emit.bind(eventBus);
    return promise;
};
exports.eventBusPromise = eventBusPromise;
var EventBus = /** @class */ (function () {
    function EventBus(ctx) {
        this._events = {};
        this._ctx = ctx;
    }
    EventBus.prototype.on = function (event, cb) {
        if (this._events[event] == null) {
            this._events[event] = [];
        }
        this._events[event].push(cb);
        return this;
    };
    EventBus.prototype.off = function (event, cb) {
        if (this._events[event]) {
            if (cb) {
                var index = this._events[event].indexOf(cb);
                this._events[event].splice(index, 1);
            }
            else {
                this._events[event] = [];
            }
        }
    };
    EventBus.prototype.emit = function (event) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var events = this._events[event] || [];
        return Promise.all(events.map(function (cb) {
            var result = cb.call.apply(cb, __spreadArray([_this._ctx], args, false));
            return result && result.then ? result : Promise.resolve(result);
        }));
    };
    EventBus.prototype.destroy = function () {
        this._events = null;
        this._ctx = null;
    };
    return EventBus;
}());
exports.EventBus = EventBus;


/***/ }),

/***/ "./src/utils/http_request.ts":
/*!***********************************!*\
  !*** ./src/utils/http_request.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpRequest = void 0;
var fetch = (function () {
    if (process.env.BUILD_ENV === "node") {
        return (__webpack_require__(/*! node-fetch */ "node-fetch")["default"]);
    }
    return window.fetch;
})();
var HttpRequest = /** @class */ (function () {
    function HttpRequest(option) {
        if (option === void 0) { option = {}; }
        this.baseUrl = "";
        option = typeof option === "string" ? {
            baseUrl: option
        } : option;
        if (option.baseUrl) {
            this.baseUrl = option.baseUrl;
        }
    }
    HttpRequest.prototype.get = function (url, query) {
        if (url === void 0) { url = ""; }
        if (query === void 0) { query = {}; }
        url = this.baseUrl + url + Object.keys(query).
            map(function (key) { return "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(query[key])); }).join('&');
        return fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        }).then(function (res) {
            return res.json();
        });
    };
    HttpRequest.prototype.post = function (url, body) {
        if (url === void 0) { url = ""; }
        url = this.baseUrl + url;
        return fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: body ? JSON.stringify(body) : null
        }).then(function (res) {
            return res.json();
        });
    };
    return HttpRequest;
}());
exports.HttpRequest = HttpRequest;


/***/ }),

/***/ "./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.utils = void 0;
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var implementation_1 = __webpack_require__(/*! ../implementation */ "./src/implementation/index.ts");
__exportStar(__webpack_require__(/*! ./use */ "./src/utils/use.ts"), exports);
__exportStar(__webpack_require__(/*! ./event_bus */ "./src/utils/event_bus.ts"), exports);
__exportStar(__webpack_require__(/*! ./logger */ "./src/utils/logger.ts"), exports);
__exportStar(__webpack_require__(/*! ./merge */ "./src/utils/merge.ts"), exports);
__exportStar(__webpack_require__(/*! ./map_promise */ "./src/utils/map_promise.ts"), exports);
__exportStar(__webpack_require__(/*! ./http_request */ "./src/utils/http_request.ts"), exports);
__exportStar(__webpack_require__(/*! ./converter */ "./src/utils/converter.ts"), exports);
__exportStar(__webpack_require__(/*! ./web3_side_chain_client */ "./src/utils/web3_side_chain_client.ts"), exports);
__exportStar(__webpack_require__(/*! ./base_token */ "./src/utils/base_token.ts"), exports);
__exportStar(__webpack_require__(/*! ./set_proof_api_url */ "./src/utils/set_proof_api_url.ts"), exports);
__exportStar(__webpack_require__(/*! ./resolve */ "./src/utils/resolve.ts"), exports);
__exportStar(__webpack_require__(/*! ./promise_resolve */ "./src/utils/promise_resolve.ts"), exports);
__exportStar(__webpack_require__(/*! ./bridge_client */ "./src/utils/bridge_client.ts"), exports);
__exportStar(__webpack_require__(/*! ./not_implemented */ "./src/utils/not_implemented.ts"), exports);
__exportStar(__webpack_require__(/*! ./bridge_client */ "./src/utils/bridge_client.ts"), exports);
exports.utils = {
    converter: __1.Converter,
    Web3Client: __1.BaseWeb3Client,
    BN: implementation_1.EmptyBigNumber,
    UnstoppableDomains: Object
};


/***/ }),

/***/ "./src/utils/logger.ts":
/*!*****************************!*\
  !*** ./src/utils/logger.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Logger = void 0;
var error_helper_1 = __webpack_require__(/*! ./error_helper */ "./src/utils/error_helper.ts");
var Logger = /** @class */ (function () {
    function Logger() {
    }
    Logger.prototype.enableLog = function (value) {
        this.isEnabled = value ? true : false;
    };
    Logger.prototype.log = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        if (this.isEnabled) {
            console.log.apply(console, message);
        }
    };
    Logger.prototype.error = function (type, info) {
        return new error_helper_1.ErrorHelper(type, info);
    };
    return Logger;
}());
exports.Logger = Logger;


/***/ }),

/***/ "./src/utils/map_promise.ts":
/*!**********************************!*\
  !*** ./src/utils/map_promise.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapPromise = void 0;
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var runPromises = function (promises, converter) {
    var maps = promises.map(function (val, index) {
        return converter(val, index);
    });
    return Promise.all(maps);
};
function mapPromise(values, converter, option) {
    if (option === void 0) { option = {}; }
    var valuesLength = values.length;
    var concurrency = option.concurrency || valuesLength;
    var result = [];
    var limitPromiseRun = function () {
        var promises = values.splice(0, concurrency);
        return runPromises(promises, converter).then(function (promiseResult) {
            result = result.concat(promiseResult);
            return valuesLength > result.length ?
                limitPromiseRun() : (0, __1.promiseResolve)(result);
        });
    };
    return limitPromiseRun();
}
exports.mapPromise = mapPromise;


/***/ }),

/***/ "./src/utils/merge.ts":
/*!****************************!*\
  !*** ./src/utils/merge.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports) {


var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.merge = void 0;
var merge = function () {
    var obj = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        obj[_i] = arguments[_i];
    }
    return Object.assign.apply(Object, __spreadArray([{}], obj, false));
};
exports.merge = merge;


/***/ }),

/***/ "./src/utils/not_implemented.ts":
/*!**************************************!*\
  !*** ./src/utils/not_implemented.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.throwNotImplemented = void 0;
var throwNotImplemented = function () {
    throw new Error("not implemented");
    return '';
};
exports.throwNotImplemented = throwNotImplemented;


/***/ }),

/***/ "./src/utils/promise_resolve.ts":
/*!**************************************!*\
  !*** ./src/utils/promise_resolve.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.promiseAny = exports.promiseResolve = void 0;
var promiseResolve = function (value) {
    return Promise.resolve(value);
};
exports.promiseResolve = promiseResolve;
var promiseAny = function (promisesArray) {
    var promiseErrors = new Array(promisesArray.length);
    var counter = 0;
    //return a new promise
    return new Promise(function (resolve, reject) {
        promisesArray.forEach(function (promise) {
            Promise.resolve(promise)
                .then(resolve) // resolve, when any of the input promise resolves
                .catch(function (error) {
                promiseErrors[counter] = error;
                counter = counter + 1;
                if (counter === promisesArray.length) {
                    // all promises rejected, reject outer promise
                    reject(promiseErrors);
                }
            }); // reject, when any of the input promise rejects
        });
    });
};
exports.promiseAny = promiseAny;


/***/ }),

/***/ "./src/utils/resolve.ts":
/*!******************************!*\
  !*** ./src/utils/resolve.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolve = void 0;
function resolve(obj, path) {
    var properties = Array.isArray(path) ? path : path.split(".");
    return properties.reduce(function (prev, curr) { return prev && prev[curr]; }, obj);
}
exports.resolve = resolve;


/***/ }),

/***/ "./src/utils/set_proof_api_url.ts":
/*!****************************************!*\
  !*** ./src/utils/set_proof_api_url.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setProofApi = void 0;
var services_1 = __webpack_require__(/*! ../services */ "./src/services/index.ts");
var setProofApi = function (url) {
    var urlLength = url.length;
    if (url[urlLength - 1] !== '/') {
        url += '/';
    }
    services_1.service.network = new services_1.NetworkService(url);
};
exports.setProofApi = setProofApi;


/***/ }),

/***/ "./src/utils/use.ts":
/*!**************************!*\
  !*** ./src/utils/use.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.use = void 0;
var default_1 = __webpack_require__(/*! ../default */ "./src/default.ts");
var use = function (plugin) {
    var payload = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        payload[_i - 1] = arguments[_i];
    }
    var pluginInstance = typeof plugin === "function" ? new plugin() : plugin;
    return pluginInstance.setup.apply(pluginInstance, __spreadArray([default_1.defaultExport], payload, false));
};
exports.use = use;


/***/ }),

/***/ "./src/utils/web3_side_chain_client.ts":
/*!*********************************************!*\
  !*** ./src/utils/web3_side_chain_client.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Web3SideChainClient = void 0;
var services_1 = __webpack_require__(/*! ../services */ "./src/services/index.ts");
var logger_1 = __webpack_require__(/*! ./logger */ "./src/utils/logger.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var Web3SideChainClient = /** @class */ (function () {
    function Web3SideChainClient() {
        this.logger = new logger_1.Logger();
    }
    Web3SideChainClient.prototype.init = function (config) {
        config = config || {};
        this.config = config;
        // tslint:disable-next-line
        var Web3Client = __1.utils.Web3Client;
        if (!Web3Client) {
            throw new Error("Web3Client is not set");
        }
        if (__1.utils.UnstoppableDomains) {
            this.resolution = __1.utils.UnstoppableDomains;
        }
        this.providers = config.providers;
        for (var _i = 0, _a = Object.entries(this.providers); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            this.providers[key].defaultConfig = value.defaultConfig || {};
            this.providers[key].provider = new Web3Client(value.provider, this.logger);
        }
        this.logger.enableLog(config.log);
        this.network = config.network;
        this.abiManager = new services_1.ABIService(this.network);
        return Promise.resolve(this.network);
    };
    Web3SideChainClient.prototype.getDefaultConfig = function (networkId) {
        return this.providers[networkId].defaultConfig;
    };
    Web3SideChainClient.prototype.getConfiguration = function (networkId) {
        return this.providers[networkId].configuration;
    };
    return Web3SideChainClient;
}());
exports.Web3SideChainClient = Web3SideChainClient;


/***/ }),

/***/ "@ethereumjs/util":
/*!***********************************!*\
  !*** external "@ethereumjs/util" ***!
  \***********************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__ethereumjs_util__;

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE_node_fetch__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=lxly.umd.js.map