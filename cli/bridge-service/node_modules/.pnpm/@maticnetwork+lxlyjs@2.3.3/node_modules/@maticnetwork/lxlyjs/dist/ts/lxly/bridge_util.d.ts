import { Web3SideChainClient } from "../utils";
import { IBaseClientConfig } from "..";
import { TYPE_AMOUNT } from '../types';
export interface IBridgeEventInfo {
    originNetwork: number;
    originTokenAddress: string;
    destinationNetwork: number;
    destinationAddress: string;
    amount: TYPE_AMOUNT;
    metadata: string;
    depositCount: number;
}
export interface IMerkleProof {
    merkle_proof: string[];
    rollup_merkle_proof?: string[];
    exit_root_num: string;
    l2_exit_root_num: string;
    main_exit_root: string;
    rollup_exit_root: string;
}
export interface IClaimPayload {
    smtProof: string[];
    smtProofRollup?: string[];
    globalIndex: string;
    mainnetExitRoot: string;
    rollupExitRoot: string;
    originNetwork: number;
    originTokenAddress: string;
    destinationNetwork: number;
    destinationAddress: string;
    amount: TYPE_AMOUNT;
    metadata: string;
}
export declare class BridgeUtil {
    private client_;
    private BRIDGE_TOPIC;
    constructor(client: Web3SideChainClient<IBaseClientConfig>);
    private decodedBridgeData_;
    private getBridgeLogData_;
    private getProof_;
    getBridgeLogData(transactionHash: string, networkId: number, bridgeIndex?: number): any;
    computeGlobalIndex(indexLocal: number, sourceNetworkId: number): bigint;
    buildPayloadForClaim(transactionHash: string, networkId: number, bridgeIndex?: number): any;
}
