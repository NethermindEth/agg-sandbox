import { ITransactionOption } from "../interfaces";
import { AbiItem } from "../types";
import { BaseToken, Web3SideChainClient } from "../utils";
import { IBaseClientConfig } from "../interfaces";
export declare class Contract extends BaseToken<IBaseClientConfig> {
    constructor(abi: AbiItem[], tokenAddress: string, networkId: number, client: Web3SideChainClient<IBaseClientConfig>);
    /**
     * Read from contract
     *
     * @param {string} method - Method to call
     * @param {any[]} args - method arguments
     * @returns
     * @memberof Contract
     */
    read(method: string, ...args: any[]): Promise<any>;
    /**
     * write to contract
     *
     * @param {ITransactionOption} option - options
     * @param {string} method - Method to call
     * @param {any[]} args - method arguments
     * @returns
     * @memberof Contract
     */
    write(option: ITransactionOption, method: string, ...args: any[]): Promise<import("../interfaces").ITransactionWriteResult>;
    /**
     * encode abi call
     * @param {string} method - Method to call
     * @param {any[]} args - method arguments
     * @returns
     * @memberof Contract
     */
    encodeAbi(method: string, ...args: any[]): Promise<any>;
    /**
     * get {r, s, v} from signature
     * @param {string} signature
     *
     * @returns
     * @memberof ERC20
     */
    getSignatureParameters(signature: string): {
        r: string;
        s: string;
        v: any;
    };
}
