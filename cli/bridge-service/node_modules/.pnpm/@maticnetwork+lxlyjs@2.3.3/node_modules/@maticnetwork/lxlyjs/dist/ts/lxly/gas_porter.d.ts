import { BaseToken, Web3SideChainClient } from "../utils";
import { IBaseClientConfig, ITransactionOption, ICargo, GassetSource, GassetType, IConversionAuthorization } from "../interfaces";
export declare class GasPorter extends BaseToken<IBaseClientConfig> {
    constructor(client_: Web3SideChainClient<IBaseClientConfig>, address: string, networkId: number);
    method(methodName: string, ...args: any[]): Promise<import("..").BaseContractMethod>;
    plotRoute(cargo: ICargo, option?: ITransactionOption): Promise<unknown>;
    bridgeAssetAndGas(requestConversion: boolean, forceUpdateGlobalExitRoot: boolean, destinationNetwork: number, destinationAddress: string, trackingNumber: number, gasset: string, gassetSource: GassetSource, gassetPermitData: string, gassetAmount: string, swapCalldata: string, token: string, tokenAmount: string, tokenPermitData: string, option?: ITransactionOption): Promise<import("../interfaces").ITransactionWriteResult>;
    convertGasset(data: IConversionAuthorization, signature: string, option?: ITransactionOption): Promise<import("../interfaces").ITransactionWriteResult>;
    determineGasset(destinationNetworkGasTokenNetwork: number, destinationNetworkGasTokenAddress: string, gassetType: GassetType, option?: ITransactionOption): Promise<unknown>;
    determineConversion(destinationNetworkGasTokenNetwork: number, destinationNetworkGasTokenAddress: string, gasset: string, option?: ITransactionOption): Promise<unknown>;
}
