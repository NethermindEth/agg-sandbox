import { ERC20 } from "./erc20";
import { VaultBridge } from "./vault_bridge";
import { Contract } from "./contract";
import { BridgeClient } from "../utils";
import { IBaseClientConfig, IWrappers, IGasPorters } from "../interfaces";
import { AbiItem } from "../types";
export * from "./bridge";
export * from "./bridge_util";
export * from "./wrapper";
export * from "./bridge_extension";
export * from "./gas_porter";
export declare class LxLyClient extends BridgeClient {
    wrappers: IWrappers;
    gasPorters: IGasPorters;
    init(config: IBaseClientConfig): Promise<this>;
    /**
     * creates instance of ERC20 token
     *
     * @param {string} tokenAddress
     * @param {boolean} isParent
     *
     * @param bridgeAdapterAddress Needed if a custom erc20 token is being bridged
     * @returns
     * @memberof ERC20
     */
    erc20(tokenAddress: string, networkId: number, bridgeAdapterAddress?: string): ERC20;
    /**
     * creates instance of vault bridge token
     *
     * @param {string} vaultAddress
     * @param {boolean} networkId
     *
     * @returns
     * @memberof VaultBridge
     */
    vaultBridge(vaultAddress: string, networkId: number): VaultBridge;
    /**
     * creates instance of ERC20 token
     *
     * @param {AbiItem[]} abi
     * @param {string} tokenAddress
     * @param {number} networkId
     *
     * @returns
     * @memberof Contract
     */
    contract(abi: AbiItem[], tokenAddress: string, networkId: number): Contract;
    private getContracts_;
}
