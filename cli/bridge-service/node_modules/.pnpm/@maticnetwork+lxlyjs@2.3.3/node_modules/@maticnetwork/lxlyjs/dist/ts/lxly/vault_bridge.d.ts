import { Web3SideChainClient } from "../utils";
import { IBaseClientConfig, ITransactionOption, IContracts } from "../interfaces";
import { Token } from "./token";
import { TYPE_AMOUNT } from "../types";
export declare class VaultBridge extends Token {
    constructor(address: string, networkId: number, client: Web3SideChainClient<IBaseClientConfig>, getContracts: (networkId: number) => IContracts);
    method(methodName: string, ...args: any[]): Promise<import("..").BaseContractMethod>;
    depositAndBridge(asset: TYPE_AMOUNT, receiver: string, destinationNetworkId: number, forceUpdateGlobalExitRoot: boolean, option?: ITransactionOption): Promise<import("..").ITransactionWriteResult>;
    depositGasTokenAndBridge(asset: TYPE_AMOUNT, receiver: string, destinationNetworkId: number, forceUpdateGlobalExitRoot: boolean, option?: ITransactionOption): Promise<import("..").ITransactionWriteResult>;
    claimAndRedeem(transactionHash: string, sourceNetworkId: number, option?: ITransactionOption): any;
}
